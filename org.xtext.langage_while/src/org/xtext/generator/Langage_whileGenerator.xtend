/*
 * generated by Xtext
 */
package org.xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.xtext.langage_while.Model
import org.xtext.langage_while.Program
import org.xtext.langage_while.Function
import org.xtext.langage_while.Def
import org.xtext.langage_while.Input
import org.xtext.langage_while.Output
import org.xtext.langage_while.Variable
import org.eclipse.xtext.naming.IQualifiedNameProvider
/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
  import com.google.inject.Inject
class Langage_whileGenerator implements IGenerator {
	
	   @Inject extension IQualifiedNameProvider
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
    for(e: resource.allContents.toIterable.filter(Model)) {
      fsa.generateFile(
        e.fullyQualifiedName.toString("/") + ".whpp",
        e.compile)
    }
  }
		
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))
	
	
	def compile (Model e)
	 '''
	«e.greetings.compile»
	'''
	
	def compile (Program p)
	'''
	«FOR f:p.f»
	«f.compile»
	«ENDFOR» «p.compile»
	
	'''
	
	def compile (Function f)
	'''
		function «f.nom»: «f.d» 
	'''
	
	def compile (Def d)
	'''
		read	«d.in»	
		% «d.c»	
		% write	«d.o»
	'''
	
	def compile (Input l)
	'''
	«l.v» , 	«l.in»
	'''
	
	def compile (Output O)
	'''
	«O.n» ,		«O.o»
	'''
	
	
	def compile (Variable v)
	'''
	«v.n»
	'''
}
