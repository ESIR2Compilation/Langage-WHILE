/*
 * generated by Xtext
 */
package org.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class Langage_whileGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cGreetingsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGreetingsProgramParserRuleCall_0 = (RuleCall)cGreetingsAssignment.eContents().get(0);
		
		//Model:
		//	greetings=Program;
		@Override public ParserRule getRule() { return rule; }

		//greetings=Program
		public Assignment getGreetingsAssignment() { return cGreetingsAssignment; }

		//Program
		public RuleCall getGreetingsProgramParserRuleCall_0() { return cGreetingsProgramParserRuleCall_0; }
	}

	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFFunctionParserRuleCall_0_0 = (RuleCall)cFAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cLCsParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cPpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPpProgramParserRuleCall_1_1_0 = (RuleCall)cPpAssignment_1_1.eContents().get(0);
		
		/// * Intégrer def dans function pour l'interprétation du noeud
		//	 * Identificateur LC
		//	 * Donner des noms (command etc)
		//	 * / / * PROGRAM * / Program:
		//	f=Function (LCs pp=Program)?;
		@Override public ParserRule getRule() { return rule; }

		//f=Function (LCs pp=Program)?
		public Group getGroup() { return cGroup; }

		//f=Function
		public Assignment getFAssignment_0() { return cFAssignment_0; }

		//Function
		public RuleCall getFFunctionParserRuleCall_0_0() { return cFFunctionParserRuleCall_0_0; }

		//(LCs pp=Program)?
		public Group getGroup_1() { return cGroup_1; }

		//LCs
		public RuleCall getLCsParserRuleCall_1_0() { return cLCsParserRuleCall_1_0; }

		//pp=Program
		public Assignment getPpAssignment_1_1() { return cPpAssignment_1_1; }

		//Program
		public RuleCall getPpProgramParserRuleCall_1_1_0() { return cPpProgramParserRuleCall_1_1_0; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNomAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNomSYMTerminalRuleCall_2_0 = (RuleCall)cNomAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cLCsParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cDAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDDefParserRuleCall_5_0 = (RuleCall)cDAssignment_5.eContents().get(0);
		
		//Function:
		//	"function" LCs nom=SYM ":" LCs d=Def;
		@Override public ParserRule getRule() { return rule; }

		//"function" LCs nom=SYM ":" LCs d=Def
		public Group getGroup() { return cGroup; }

		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }

		//LCs
		public RuleCall getLCsParserRuleCall_1() { return cLCsParserRuleCall_1; }

		//nom=SYM
		public Assignment getNomAssignment_2() { return cNomAssignment_2; }

		//SYM
		public RuleCall getNomSYMTerminalRuleCall_2_0() { return cNomSYMTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//LCs
		public RuleCall getLCsParserRuleCall_4() { return cLCsParserRuleCall_4; }

		//d=Def
		public Assignment getDAssignment_5() { return cDAssignment_5; }

		//Def
		public RuleCall getDDefParserRuleCall_5_0() { return cDDefParserRuleCall_5_0; }
	}

	public class DefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Def");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cInAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInInputParserRuleCall_2_0 = (RuleCall)cInAssignment_2.eContents().get(0);
		private final RuleCall cLCsParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cPercentSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCCommandsParserRuleCall_5_0 = (RuleCall)cCAssignment_5.eContents().get(0);
		private final RuleCall cLCsParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cPercentSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cWriteKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final RuleCall cLCsParserRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Assignment cOAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cOOutputParserRuleCall_10_0 = (RuleCall)cOAssignment_10.eContents().get(0);
		
		//Def:
		//	"read" LCs in=Input LCs "%" c=Commands LCs "%" "write" LCs o=Output;
		@Override public ParserRule getRule() { return rule; }

		//"read" LCs in=Input LCs "%" c=Commands LCs "%" "write" LCs o=Output
		public Group getGroup() { return cGroup; }

		//"read"
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }

		//LCs
		public RuleCall getLCsParserRuleCall_1() { return cLCsParserRuleCall_1; }

		//in=Input
		public Assignment getInAssignment_2() { return cInAssignment_2; }

		//Input
		public RuleCall getInInputParserRuleCall_2_0() { return cInInputParserRuleCall_2_0; }

		//LCs
		public RuleCall getLCsParserRuleCall_3() { return cLCsParserRuleCall_3; }

		//"%"
		public Keyword getPercentSignKeyword_4() { return cPercentSignKeyword_4; }

		//c=Commands
		public Assignment getCAssignment_5() { return cCAssignment_5; }

		//Commands
		public RuleCall getCCommandsParserRuleCall_5_0() { return cCCommandsParserRuleCall_5_0; }

		//LCs
		public RuleCall getLCsParserRuleCall_6() { return cLCsParserRuleCall_6; }

		//"%"
		public Keyword getPercentSignKeyword_7() { return cPercentSignKeyword_7; }

		//"write"
		public Keyword getWriteKeyword_8() { return cWriteKeyword_8; }

		//LCs
		public RuleCall getLCsParserRuleCall_9() { return cLCsParserRuleCall_9; }

		//o=Output
		public Assignment getOAssignment_10() { return cOAssignment_10; }

		//Output
		public RuleCall getOOutputParserRuleCall_10_0() { return cOOutputParserRuleCall_10_0; }
	}

	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Input");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cVAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVVARTerminalRuleCall_0_0_0 = (RuleCall)cVAssignment_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cLCsParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Assignment cInAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cInInputParserRuleCall_0_3_0 = (RuleCall)cInAssignment_0_3.eContents().get(0);
		private final Assignment cYAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cYVARTerminalRuleCall_1_0 = (RuleCall)cYAssignment_1.eContents().get(0);
		
		//Input:
		//	v=VAR "," LCs in=Input | y=VAR;
		@Override public ParserRule getRule() { return rule; }

		//v=VAR "," LCs in=Input | y=VAR
		public Alternatives getAlternatives() { return cAlternatives; }

		//v=VAR "," LCs in=Input
		public Group getGroup_0() { return cGroup_0; }

		//v=VAR
		public Assignment getVAssignment_0_0() { return cVAssignment_0_0; }

		//VAR
		public RuleCall getVVARTerminalRuleCall_0_0_0() { return cVVARTerminalRuleCall_0_0_0; }

		//","
		public Keyword getCommaKeyword_0_1() { return cCommaKeyword_0_1; }

		//LCs
		public RuleCall getLCsParserRuleCall_0_2() { return cLCsParserRuleCall_0_2; }

		//in=Input
		public Assignment getInAssignment_0_3() { return cInAssignment_0_3; }

		//Input
		public RuleCall getInInputParserRuleCall_0_3_0() { return cInInputParserRuleCall_0_3_0; }

		//y=VAR
		public Assignment getYAssignment_1() { return cYAssignment_1; }

		//VAR
		public RuleCall getYVARTerminalRuleCall_1_0() { return cYVARTerminalRuleCall_1_0; }
	}

	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Output");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNVARTerminalRuleCall_0_0_0 = (RuleCall)cNAssignment_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cLCsParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Assignment cOAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cOOutputParserRuleCall_0_3_0 = (RuleCall)cOAssignment_0_3.eContents().get(0);
		private final Assignment cSAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSVARTerminalRuleCall_1_0 = (RuleCall)cSAssignment_1.eContents().get(0);
		
		//Output:
		//	n=VAR "," LCs o=Output | s=VAR;
		@Override public ParserRule getRule() { return rule; }

		//n=VAR "," LCs o=Output | s=VAR
		public Alternatives getAlternatives() { return cAlternatives; }

		//n=VAR "," LCs o=Output
		public Group getGroup_0() { return cGroup_0; }

		//n=VAR
		public Assignment getNAssignment_0_0() { return cNAssignment_0_0; }

		//VAR
		public RuleCall getNVARTerminalRuleCall_0_0_0() { return cNVARTerminalRuleCall_0_0_0; }

		//","
		public Keyword getCommaKeyword_0_1() { return cCommaKeyword_0_1; }

		//LCs
		public RuleCall getLCsParserRuleCall_0_2() { return cLCsParserRuleCall_0_2; }

		//o=Output
		public Assignment getOAssignment_0_3() { return cOAssignment_0_3; }

		//Output
		public RuleCall getOOutputParserRuleCall_0_3_0() { return cOOutputParserRuleCall_0_3_0; }

		//s=VAR
		public Assignment getSAssignment_1() { return cSAssignment_1; }

		//VAR
		public RuleCall getSVARTerminalRuleCall_1_0() { return cSVARTerminalRuleCall_1_0; }
	}

	public class CommandsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Commands");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCommandParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLCsParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cCommandsParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		/// * COMMANDES SIMPLES ET COMPLEXES * / Commands:
		//	Command (";" LCs Commands)?;
		@Override public ParserRule getRule() { return rule; }

		//Command (";" LCs Commands)?
		public Group getGroup() { return cGroup; }

		//Command
		public RuleCall getCommandParserRuleCall_0() { return cCommandParserRuleCall_0; }

		//(";" LCs Commands)?
		public Group getGroup_1() { return cGroup_1; }

		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }

		//LCs
		public RuleCall getLCsParserRuleCall_1_1() { return cLCsParserRuleCall_1_1; }

		//Commands
		public RuleCall getCommandsParserRuleCall_1_2() { return cCommandsParserRuleCall_1_2; }
	}

	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNopKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cVarsParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cLCsParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cLCsParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final RuleCall cEXPRSParserRuleCall_1_4 = (RuleCall)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cWhileKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cLCsParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cEXPRParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final RuleCall cLCsParserRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final Keyword cDoKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final RuleCall cLCsParserRuleCall_2_5 = (RuleCall)cGroup_2.eContents().get(5);
		private final RuleCall cCommandsParserRuleCall_2_6 = (RuleCall)cGroup_2.eContents().get(6);
		private final RuleCall cLCsParserRuleCall_2_7 = (RuleCall)cGroup_2.eContents().get(7);
		private final Keyword cOdKeyword_2_8 = (Keyword)cGroup_2.eContents().get(8);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cForKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cLCsParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cEXPRParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final RuleCall cLCsParserRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		private final Keyword cDoKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final RuleCall cLCsParserRuleCall_3_5 = (RuleCall)cGroup_3.eContents().get(5);
		private final RuleCall cCommandsParserRuleCall_3_6 = (RuleCall)cGroup_3.eContents().get(6);
		private final RuleCall cLCsParserRuleCall_3_7 = (RuleCall)cGroup_3.eContents().get(7);
		private final Keyword cOdKeyword_3_8 = (Keyword)cGroup_3.eContents().get(8);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cIfKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cLCsParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cEXPRParserRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final RuleCall cLCsParserRuleCall_4_3 = (RuleCall)cGroup_4.eContents().get(3);
		private final Keyword cThenKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final RuleCall cLCsParserRuleCall_4_5 = (RuleCall)cGroup_4.eContents().get(5);
		private final RuleCall cCommandsParserRuleCall_4_6 = (RuleCall)cGroup_4.eContents().get(6);
		private final RuleCall cLCsParserRuleCall_4_7 = (RuleCall)cGroup_4.eContents().get(7);
		private final Group cGroup_4_8 = (Group)cGroup_4.eContents().get(8);
		private final Keyword cElseKeyword_4_8_0 = (Keyword)cGroup_4_8.eContents().get(0);
		private final RuleCall cLCsParserRuleCall_4_8_1 = (RuleCall)cGroup_4_8.eContents().get(1);
		private final RuleCall cCommandsParserRuleCall_4_8_2 = (RuleCall)cGroup_4_8.eContents().get(2);
		private final RuleCall cLCsParserRuleCall_4_8_3 = (RuleCall)cGroup_4_8.eContents().get(3);
		private final Keyword cFiKeyword_4_9 = (Keyword)cGroup_4.eContents().get(9);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cForeachKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cLCsParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final RuleCall cEXPRParserRuleCall_5_2 = (RuleCall)cGroup_5.eContents().get(2);
		private final RuleCall cLCsParserRuleCall_5_3 = (RuleCall)cGroup_5.eContents().get(3);
		private final Keyword cInKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final RuleCall cLCsParserRuleCall_5_5 = (RuleCall)cGroup_5.eContents().get(5);
		private final RuleCall cEXPRParserRuleCall_5_6 = (RuleCall)cGroup_5.eContents().get(6);
		private final RuleCall cLCsParserRuleCall_5_7 = (RuleCall)cGroup_5.eContents().get(7);
		private final Keyword cDoKeyword_5_8 = (Keyword)cGroup_5.eContents().get(8);
		private final RuleCall cLCsParserRuleCall_5_9 = (RuleCall)cGroup_5.eContents().get(9);
		private final RuleCall cCommandsParserRuleCall_5_10 = (RuleCall)cGroup_5.eContents().get(10);
		private final RuleCall cLCsParserRuleCall_5_11 = (RuleCall)cGroup_5.eContents().get(11);
		private final Keyword cOdKeyword_5_12 = (Keyword)cGroup_5.eContents().get(12);
		
		//Command:
		//	"nop" | Vars LCs ":=" LCs EXPRS | "while" LCs EXPR LCs "do" LCs Commands LCs "od" | "for" LCs EXPR LCs "do" LCs
		//	Commands LCs "od" | "if" LCs EXPR LCs "then" LCs Commands LCs ("else" LCs Commands LCs)? "fi" | "foreach" LCs EXPR
		//	LCs "in" LCs EXPR LCs "do" LCs Commands LCs "od";
		@Override public ParserRule getRule() { return rule; }

		//"nop" | Vars LCs ":=" LCs EXPRS | "while" LCs EXPR LCs "do" LCs Commands LCs "od" | "for" LCs EXPR LCs "do" LCs Commands
		//LCs "od" | "if" LCs EXPR LCs "then" LCs Commands LCs ("else" LCs Commands LCs)? "fi" | "foreach" LCs EXPR LCs "in" LCs
		//EXPR LCs "do" LCs Commands LCs "od"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"nop"
		public Keyword getNopKeyword_0() { return cNopKeyword_0; }

		//Vars LCs ":=" LCs EXPRS
		public Group getGroup_1() { return cGroup_1; }

		//Vars
		public RuleCall getVarsParserRuleCall_1_0() { return cVarsParserRuleCall_1_0; }

		//LCs
		public RuleCall getLCsParserRuleCall_1_1() { return cLCsParserRuleCall_1_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_1_2() { return cColonEqualsSignKeyword_1_2; }

		//LCs
		public RuleCall getLCsParserRuleCall_1_3() { return cLCsParserRuleCall_1_3; }

		//EXPRS
		public RuleCall getEXPRSParserRuleCall_1_4() { return cEXPRSParserRuleCall_1_4; }

		//"while" LCs EXPR LCs "do" LCs Commands LCs "od"
		public Group getGroup_2() { return cGroup_2; }

		//"while"
		public Keyword getWhileKeyword_2_0() { return cWhileKeyword_2_0; }

		//LCs
		public RuleCall getLCsParserRuleCall_2_1() { return cLCsParserRuleCall_2_1; }

		//EXPR
		public RuleCall getEXPRParserRuleCall_2_2() { return cEXPRParserRuleCall_2_2; }

		//LCs
		public RuleCall getLCsParserRuleCall_2_3() { return cLCsParserRuleCall_2_3; }

		//"do"
		public Keyword getDoKeyword_2_4() { return cDoKeyword_2_4; }

		//LCs
		public RuleCall getLCsParserRuleCall_2_5() { return cLCsParserRuleCall_2_5; }

		//Commands
		public RuleCall getCommandsParserRuleCall_2_6() { return cCommandsParserRuleCall_2_6; }

		//LCs
		public RuleCall getLCsParserRuleCall_2_7() { return cLCsParserRuleCall_2_7; }

		//"od"
		public Keyword getOdKeyword_2_8() { return cOdKeyword_2_8; }

		//"for" LCs EXPR LCs "do" LCs Commands LCs "od"
		public Group getGroup_3() { return cGroup_3; }

		//"for"
		public Keyword getForKeyword_3_0() { return cForKeyword_3_0; }

		//LCs
		public RuleCall getLCsParserRuleCall_3_1() { return cLCsParserRuleCall_3_1; }

		//EXPR
		public RuleCall getEXPRParserRuleCall_3_2() { return cEXPRParserRuleCall_3_2; }

		//LCs
		public RuleCall getLCsParserRuleCall_3_3() { return cLCsParserRuleCall_3_3; }

		//"do"
		public Keyword getDoKeyword_3_4() { return cDoKeyword_3_4; }

		//LCs
		public RuleCall getLCsParserRuleCall_3_5() { return cLCsParserRuleCall_3_5; }

		//Commands
		public RuleCall getCommandsParserRuleCall_3_6() { return cCommandsParserRuleCall_3_6; }

		//LCs
		public RuleCall getLCsParserRuleCall_3_7() { return cLCsParserRuleCall_3_7; }

		//"od"
		public Keyword getOdKeyword_3_8() { return cOdKeyword_3_8; }

		//"if" LCs EXPR LCs "then" LCs Commands LCs ("else" LCs Commands LCs)? "fi"
		public Group getGroup_4() { return cGroup_4; }

		//"if"
		public Keyword getIfKeyword_4_0() { return cIfKeyword_4_0; }

		//LCs
		public RuleCall getLCsParserRuleCall_4_1() { return cLCsParserRuleCall_4_1; }

		//EXPR
		public RuleCall getEXPRParserRuleCall_4_2() { return cEXPRParserRuleCall_4_2; }

		//LCs
		public RuleCall getLCsParserRuleCall_4_3() { return cLCsParserRuleCall_4_3; }

		//"then"
		public Keyword getThenKeyword_4_4() { return cThenKeyword_4_4; }

		//LCs
		public RuleCall getLCsParserRuleCall_4_5() { return cLCsParserRuleCall_4_5; }

		//Commands
		public RuleCall getCommandsParserRuleCall_4_6() { return cCommandsParserRuleCall_4_6; }

		//LCs
		public RuleCall getLCsParserRuleCall_4_7() { return cLCsParserRuleCall_4_7; }

		//("else" LCs Commands LCs)?
		public Group getGroup_4_8() { return cGroup_4_8; }

		//"else"
		public Keyword getElseKeyword_4_8_0() { return cElseKeyword_4_8_0; }

		//LCs
		public RuleCall getLCsParserRuleCall_4_8_1() { return cLCsParserRuleCall_4_8_1; }

		//Commands
		public RuleCall getCommandsParserRuleCall_4_8_2() { return cCommandsParserRuleCall_4_8_2; }

		//LCs
		public RuleCall getLCsParserRuleCall_4_8_3() { return cLCsParserRuleCall_4_8_3; }

		//"fi"
		public Keyword getFiKeyword_4_9() { return cFiKeyword_4_9; }

		//"foreach" LCs EXPR LCs "in" LCs EXPR LCs "do" LCs Commands LCs "od"
		public Group getGroup_5() { return cGroup_5; }

		//"foreach"
		public Keyword getForeachKeyword_5_0() { return cForeachKeyword_5_0; }

		//LCs
		public RuleCall getLCsParserRuleCall_5_1() { return cLCsParserRuleCall_5_1; }

		//EXPR
		public RuleCall getEXPRParserRuleCall_5_2() { return cEXPRParserRuleCall_5_2; }

		//LCs
		public RuleCall getLCsParserRuleCall_5_3() { return cLCsParserRuleCall_5_3; }

		//"in"
		public Keyword getInKeyword_5_4() { return cInKeyword_5_4; }

		//LCs
		public RuleCall getLCsParserRuleCall_5_5() { return cLCsParserRuleCall_5_5; }

		//EXPR
		public RuleCall getEXPRParserRuleCall_5_6() { return cEXPRParserRuleCall_5_6; }

		//LCs
		public RuleCall getLCsParserRuleCall_5_7() { return cLCsParserRuleCall_5_7; }

		//"do"
		public Keyword getDoKeyword_5_8() { return cDoKeyword_5_8; }

		//LCs
		public RuleCall getLCsParserRuleCall_5_9() { return cLCsParserRuleCall_5_9; }

		//Commands
		public RuleCall getCommandsParserRuleCall_5_10() { return cCommandsParserRuleCall_5_10; }

		//LCs
		public RuleCall getLCsParserRuleCall_5_11() { return cLCsParserRuleCall_5_11; }

		//"od"
		public Keyword getOdKeyword_5_12() { return cOdKeyword_5_12; }
	}

	public class VarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Vars");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVARTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLCsParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cVarsParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//Vars:
		//	VAR ("," LCs Vars)?;
		@Override public ParserRule getRule() { return rule; }

		//VAR ("," LCs Vars)?
		public Group getGroup() { return cGroup; }

		//VAR
		public RuleCall getVARTerminalRuleCall_0() { return cVARTerminalRuleCall_0; }

		//("," LCs Vars)?
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//LCs
		public RuleCall getLCsParserRuleCall_1_1() { return cLCsParserRuleCall_1_1; }

		//Vars
		public RuleCall getVarsParserRuleCall_1_2() { return cVarsParserRuleCall_1_2; }
	}

	public class EXPRSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEXPRParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLCsParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cEXPRSParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//EXPRS:
		//	EXPR ("," LCs EXPRS)?;
		@Override public ParserRule getRule() { return rule; }

		//EXPR ("," LCs EXPRS)?
		public Group getGroup() { return cGroup; }

		//EXPR
		public RuleCall getEXPRParserRuleCall_0() { return cEXPRParserRuleCall_0; }

		//("," LCs EXPRS)?
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//LCs
		public RuleCall getLCsParserRuleCall_1_1() { return cLCsParserRuleCall_1_1; }

		//EXPRS
		public RuleCall getEXPRSParserRuleCall_1_2() { return cEXPRSParserRuleCall_1_2; }
	}

	public class EXPRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EXPR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEXPRSIMPLEParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEXPRANDParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// * EXPRESSIONS SIMPLES * / EXPR:
		//	EXPRSIMPLE | EXPRAND;
		@Override public ParserRule getRule() { return rule; }

		//EXPRSIMPLE | EXPRAND
		public Alternatives getAlternatives() { return cAlternatives; }

		//EXPRSIMPLE
		public RuleCall getEXPRSIMPLEParserRuleCall_0() { return cEXPRSIMPLEParserRuleCall_0; }

		//EXPRAND
		public RuleCall getEXPRANDParserRuleCall_1() { return cEXPRANDParserRuleCall_1; }
	}

	public class EXPRSIMPLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRSIMPLE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final Keyword cNilKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final RuleCall cVARTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cSYMTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Alternatives cAlternatives_1 = (Alternatives)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cConsKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final RuleCall cLEXPRParserRuleCall_1_0_2 = (RuleCall)cGroup_1_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cListKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final RuleCall cLEXPRParserRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Alternatives cAlternatives_2 = (Alternatives)cAlternatives.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Keyword cHdKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final RuleCall cLCsParserRuleCall_2_0_2 = (RuleCall)cGroup_2_0.eContents().get(2);
		private final RuleCall cEXPRParserRuleCall_2_0_3 = (RuleCall)cGroup_2_0.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_2_0_4 = (Keyword)cGroup_2_0.eContents().get(4);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cTlKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final RuleCall cLCsParserRuleCall_2_1_2 = (RuleCall)cGroup_2_1.eContents().get(2);
		private final RuleCall cEXPRParserRuleCall_2_1_3 = (RuleCall)cGroup_2_1.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_2_1_4 = (Keyword)cGroup_2_1.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cSYMTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cLEXPRParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//EXPRSIMPLE:
		//	("nil" | VAR | SYM) | ("(" "cons" LEXPR ")" | "(" "list" LEXPR ")") | ("(" "hd" LCs EXPR ")" | "(" "tl" LCs EXPR ")")
		//	| "(" SYM LEXPR ")";
		@Override public ParserRule getRule() { return rule; }

		//("nil" | VAR | SYM) | ("(" "cons" LEXPR ")" | "(" "list" LEXPR ")") | ("(" "hd" LCs EXPR ")" | "(" "tl" LCs EXPR ")") |
		//"(" SYM LEXPR ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"nil" | VAR | SYM
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"nil"
		public Keyword getNilKeyword_0_0() { return cNilKeyword_0_0; }

		//VAR
		public RuleCall getVARTerminalRuleCall_0_1() { return cVARTerminalRuleCall_0_1; }

		//SYM
		public RuleCall getSYMTerminalRuleCall_0_2() { return cSYMTerminalRuleCall_0_2; }

		//"(" "cons" LEXPR ")" | "(" "list" LEXPR ")"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"(" "cons" LEXPR ")"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }

		//"cons"
		public Keyword getConsKeyword_1_0_1() { return cConsKeyword_1_0_1; }

		//LEXPR
		public RuleCall getLEXPRParserRuleCall_1_0_2() { return cLEXPRParserRuleCall_1_0_2; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_3() { return cRightParenthesisKeyword_1_0_3; }

		//"(" "list" LEXPR ")"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }

		//"list"
		public Keyword getListKeyword_1_1_1() { return cListKeyword_1_1_1; }

		//LEXPR
		public RuleCall getLEXPRParserRuleCall_1_1_2() { return cLEXPRParserRuleCall_1_1_2; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_3() { return cRightParenthesisKeyword_1_1_3; }

		//"(" "hd" LCs EXPR ")" | "(" "tl" LCs EXPR ")"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"(" "hd" LCs EXPR ")"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0_0() { return cLeftParenthesisKeyword_2_0_0; }

		//"hd"
		public Keyword getHdKeyword_2_0_1() { return cHdKeyword_2_0_1; }

		//LCs
		public RuleCall getLCsParserRuleCall_2_0_2() { return cLCsParserRuleCall_2_0_2; }

		//EXPR
		public RuleCall getEXPRParserRuleCall_2_0_3() { return cEXPRParserRuleCall_2_0_3; }

		//")"
		public Keyword getRightParenthesisKeyword_2_0_4() { return cRightParenthesisKeyword_2_0_4; }

		//"(" "tl" LCs EXPR ")"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }

		//"tl"
		public Keyword getTlKeyword_2_1_1() { return cTlKeyword_2_1_1; }

		//LCs
		public RuleCall getLCsParserRuleCall_2_1_2() { return cLCsParserRuleCall_2_1_2; }

		//EXPR
		public RuleCall getEXPRParserRuleCall_2_1_3() { return cEXPRParserRuleCall_2_1_3; }

		//")"
		public Keyword getRightParenthesisKeyword_2_1_4() { return cRightParenthesisKeyword_2_1_4; }

		//"(" SYM LEXPR ")"
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//SYM
		public RuleCall getSYMTerminalRuleCall_3_1() { return cSYMTerminalRuleCall_3_1; }

		//LEXPR
		public RuleCall getLEXPRParserRuleCall_3_2() { return cLEXPRParserRuleCall_3_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
	}

	public class LEXPRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LEXPR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLCsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cEXPRParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cLEXPRParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//LEXPR:
		//	LCs EXPR LEXPR?;
		@Override public ParserRule getRule() { return rule; }

		//LCs EXPR LEXPR?
		public Group getGroup() { return cGroup; }

		//LCs
		public RuleCall getLCsParserRuleCall_0() { return cLCsParserRuleCall_0; }

		//EXPR
		public RuleCall getEXPRParserRuleCall_1() { return cEXPRParserRuleCall_1; }

		//LEXPR?
		public RuleCall getLEXPRParserRuleCall_2() { return cLEXPRParserRuleCall_2; }
	}

	public class EXPRANDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRAND");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEXPRORParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cLCsParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cLCsParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cEXPRANDParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		/// * EXPRESSIONS LOGIQUES * / EXPRAND:
		//	EXPROR (LCs "and" LCs EXPRAND)?;
		@Override public ParserRule getRule() { return rule; }

		//EXPROR (LCs "and" LCs EXPRAND)?
		public Group getGroup() { return cGroup; }

		//EXPROR
		public RuleCall getEXPRORParserRuleCall_0() { return cEXPRORParserRuleCall_0; }

		//(LCs "and" LCs EXPRAND)?
		public Group getGroup_1() { return cGroup_1; }

		//LCs
		public RuleCall getLCsParserRuleCall_1_0() { return cLCsParserRuleCall_1_0; }

		//"and"
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }

		//LCs
		public RuleCall getLCsParserRuleCall_1_2() { return cLCsParserRuleCall_1_2; }

		//EXPRAND
		public RuleCall getEXPRANDParserRuleCall_1_3() { return cEXPRANDParserRuleCall_1_3; }
	}

	public class EXPRORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EXPROR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEXPRNOTParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cLCsParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cLCsParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cEXPRORParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//EXPROR:
		//	EXPRNOT (LCs "or" LCs EXPROR)?;
		@Override public ParserRule getRule() { return rule; }

		//EXPRNOT (LCs "or" LCs EXPROR)?
		public Group getGroup() { return cGroup; }

		//EXPRNOT
		public RuleCall getEXPRNOTParserRuleCall_0() { return cEXPRNOTParserRuleCall_0; }

		//(LCs "or" LCs EXPROR)?
		public Group getGroup_1() { return cGroup_1; }

		//LCs
		public RuleCall getLCsParserRuleCall_1_0() { return cLCsParserRuleCall_1_0; }

		//"or"
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }

		//LCs
		public RuleCall getLCsParserRuleCall_1_2() { return cLCsParserRuleCall_1_2; }

		//EXPROR
		public RuleCall getEXPRORParserRuleCall_1_3() { return cEXPRORParserRuleCall_1_3; }
	}

	public class EXPRNOTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRNOT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cNotKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cLCsParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cEXPREQParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EXPRNOT:
		//	("not" LCs)? EXPREQ;
		@Override public ParserRule getRule() { return rule; }

		//("not" LCs)? EXPREQ
		public Group getGroup() { return cGroup; }

		//("not" LCs)?
		public Group getGroup_0() { return cGroup_0; }

		//"not"
		public Keyword getNotKeyword_0_0() { return cNotKeyword_0_0; }

		//LCs
		public RuleCall getLCsParserRuleCall_0_1() { return cLCsParserRuleCall_0_1; }

		//EXPREQ
		public RuleCall getEXPREQParserRuleCall_1() { return cEXPREQParserRuleCall_1; }
	}

	public class EXPREQElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EXPREQ");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cEXPRSIMPLEParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cLCsParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cEqualsSignQuestionMarkKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cLCsParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final RuleCall cEXPRSIMPLEParserRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cEXPRParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//EXPREQ:
		//	EXPRSIMPLE LCs "=?" LCs EXPRSIMPLE | "(" EXPR ")";
		@Override public ParserRule getRule() { return rule; }

		//EXPRSIMPLE LCs "=?" LCs EXPRSIMPLE | "(" EXPR ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//EXPRSIMPLE LCs "=?" LCs EXPRSIMPLE
		public Group getGroup_0() { return cGroup_0; }

		//EXPRSIMPLE
		public RuleCall getEXPRSIMPLEParserRuleCall_0_0() { return cEXPRSIMPLEParserRuleCall_0_0; }

		//LCs
		public RuleCall getLCsParserRuleCall_0_1() { return cLCsParserRuleCall_0_1; }

		//"=?"
		public Keyword getEqualsSignQuestionMarkKeyword_0_2() { return cEqualsSignQuestionMarkKeyword_0_2; }

		//LCs
		public RuleCall getLCsParserRuleCall_0_3() { return cLCsParserRuleCall_0_3; }

		//EXPRSIMPLE
		public RuleCall getEXPRSIMPLEParserRuleCall_0_4() { return cEXPRSIMPLEParserRuleCall_0_4; }

		//"(" EXPR ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//EXPR
		public RuleCall getEXPRParserRuleCall_1_1() { return cEXPRParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Assignment cNAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNVARTerminalRuleCall_0 = (RuleCall)cNAssignment.eContents().get(0);
		
		/// * UNITES LEXICALES * / Variable:
		//	n=VAR;
		@Override public ParserRule getRule() { return rule; }

		//n=VAR
		public Assignment getNAssignment() { return cNAssignment; }

		//VAR
		public RuleCall getNVARTerminalRuleCall_0() { return cNVARTerminalRuleCall_0; }
	}

	public class SymbolesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Symboles");
		private final RuleCall cSYMTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Symboles:
		//	SYM;
		@Override public ParserRule getRule() { return rule; }

		//SYM
		public RuleCall getSYMTerminalRuleCall() { return cSYMTerminalRuleCall; }
	}

	public class ConfortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Confort");
		private final RuleCall cCONFTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Confort:
		//	CONF;
		@Override public ParserRule getRule() { return rule; }

		//CONF
		public RuleCall getCONFTerminalRuleCall() { return cCONFTerminalRuleCall; }
	}

	public class LCsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LCs");
		private final RuleCall cLCParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////Ponctuation: PONCT;	
		////terminal PONCT : (','|';'|':'|'('|')'); 
		//LCs:
		//	LC?;
		@Override public ParserRule getRule() { return rule; }

		//LC?
		public RuleCall getLCParserRuleCall() { return cLCParserRuleCall; }
	}

	public class LCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LC");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSPTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCRTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTABTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLFTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//LC:
		//	SP | CR | TAB | LF;
		@Override public ParserRule getRule() { return rule; }

		//SP | CR | TAB | LF
		public Alternatives getAlternatives() { return cAlternatives; }

		//SP
		public RuleCall getSPTerminalRuleCall_0() { return cSPTerminalRuleCall_0; }

		//CR
		public RuleCall getCRTerminalRuleCall_1() { return cCRTerminalRuleCall_1; }

		//TAB
		public RuleCall getTABTerminalRuleCall_2() { return cTABTerminalRuleCall_2; }

		//LF
		public RuleCall getLFTerminalRuleCall_3() { return cLFTerminalRuleCall_3; }
	}
	
	
	private final ModelElements pModel;
	private final ProgramElements pProgram;
	private final FunctionElements pFunction;
	private final DefElements pDef;
	private final InputElements pInput;
	private final OutputElements pOutput;
	private final CommandsElements pCommands;
	private final CommandElements pCommand;
	private final VarsElements pVars;
	private final EXPRSElements pEXPRS;
	private final EXPRElements pEXPR;
	private final EXPRSIMPLEElements pEXPRSIMPLE;
	private final LEXPRElements pLEXPR;
	private final EXPRANDElements pEXPRAND;
	private final EXPRORElements pEXPROR;
	private final EXPRNOTElements pEXPRNOT;
	private final EXPREQElements pEXPREQ;
	private final VariableElements pVariable;
	private final TerminalRule tVAR;
	private final SymbolesElements pSymboles;
	private final TerminalRule tSYM;
	private final ConfortElements pConfort;
	private final TerminalRule tCONF;
	private final LCsElements pLCs;
	private final LCElements pLC;
	private final TerminalRule tSP;
	private final TerminalRule tCR;
	private final TerminalRule tTAB;
	private final TerminalRule tLF;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Langage_whileGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pProgram = new ProgramElements();
		this.pFunction = new FunctionElements();
		this.pDef = new DefElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
		this.pCommands = new CommandsElements();
		this.pCommand = new CommandElements();
		this.pVars = new VarsElements();
		this.pEXPRS = new EXPRSElements();
		this.pEXPR = new EXPRElements();
		this.pEXPRSIMPLE = new EXPRSIMPLEElements();
		this.pLEXPR = new LEXPRElements();
		this.pEXPRAND = new EXPRANDElements();
		this.pEXPROR = new EXPRORElements();
		this.pEXPRNOT = new EXPRNOTElements();
		this.pEXPREQ = new EXPREQElements();
		this.pVariable = new VariableElements();
		this.tVAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VAR");
		this.pSymboles = new SymbolesElements();
		this.tSYM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SYM");
		this.pConfort = new ConfortElements();
		this.tCONF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CONF");
		this.pLCs = new LCsElements();
		this.pLC = new LCElements();
		this.tSP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SP");
		this.tCR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CR");
		this.tTAB = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TAB");
		this.tLF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LF");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.Langage_while".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	greetings=Program;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	/// * Intégrer def dans function pour l'interprétation du noeud
	//	 * Identificateur LC
	//	 * Donner des noms (command etc)
	//	 * / / * PROGRAM * / Program:
	//	f=Function (LCs pp=Program)?;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//Function:
	//	"function" LCs nom=SYM ":" LCs d=Def;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//Def:
	//	"read" LCs in=Input LCs "%" c=Commands LCs "%" "write" LCs o=Output;
	public DefElements getDefAccess() {
		return pDef;
	}
	
	public ParserRule getDefRule() {
		return getDefAccess().getRule();
	}

	//Input:
	//	v=VAR "," LCs in=Input | y=VAR;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}

	//Output:
	//	n=VAR "," LCs o=Output | s=VAR;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}

	/// * COMMANDES SIMPLES ET COMPLEXES * / Commands:
	//	Command (";" LCs Commands)?;
	public CommandsElements getCommandsAccess() {
		return pCommands;
	}
	
	public ParserRule getCommandsRule() {
		return getCommandsAccess().getRule();
	}

	//Command:
	//	"nop" | Vars LCs ":=" LCs EXPRS | "while" LCs EXPR LCs "do" LCs Commands LCs "od" | "for" LCs EXPR LCs "do" LCs
	//	Commands LCs "od" | "if" LCs EXPR LCs "then" LCs Commands LCs ("else" LCs Commands LCs)? "fi" | "foreach" LCs EXPR
	//	LCs "in" LCs EXPR LCs "do" LCs Commands LCs "od";
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}

	//Vars:
	//	VAR ("," LCs Vars)?;
	public VarsElements getVarsAccess() {
		return pVars;
	}
	
	public ParserRule getVarsRule() {
		return getVarsAccess().getRule();
	}

	//EXPRS:
	//	EXPR ("," LCs EXPRS)?;
	public EXPRSElements getEXPRSAccess() {
		return pEXPRS;
	}
	
	public ParserRule getEXPRSRule() {
		return getEXPRSAccess().getRule();
	}

	/// * EXPRESSIONS SIMPLES * / EXPR:
	//	EXPRSIMPLE | EXPRAND;
	public EXPRElements getEXPRAccess() {
		return pEXPR;
	}
	
	public ParserRule getEXPRRule() {
		return getEXPRAccess().getRule();
	}

	//EXPRSIMPLE:
	//	("nil" | VAR | SYM) | ("(" "cons" LEXPR ")" | "(" "list" LEXPR ")") | ("(" "hd" LCs EXPR ")" | "(" "tl" LCs EXPR ")")
	//	| "(" SYM LEXPR ")";
	public EXPRSIMPLEElements getEXPRSIMPLEAccess() {
		return pEXPRSIMPLE;
	}
	
	public ParserRule getEXPRSIMPLERule() {
		return getEXPRSIMPLEAccess().getRule();
	}

	//LEXPR:
	//	LCs EXPR LEXPR?;
	public LEXPRElements getLEXPRAccess() {
		return pLEXPR;
	}
	
	public ParserRule getLEXPRRule() {
		return getLEXPRAccess().getRule();
	}

	/// * EXPRESSIONS LOGIQUES * / EXPRAND:
	//	EXPROR (LCs "and" LCs EXPRAND)?;
	public EXPRANDElements getEXPRANDAccess() {
		return pEXPRAND;
	}
	
	public ParserRule getEXPRANDRule() {
		return getEXPRANDAccess().getRule();
	}

	//EXPROR:
	//	EXPRNOT (LCs "or" LCs EXPROR)?;
	public EXPRORElements getEXPRORAccess() {
		return pEXPROR;
	}
	
	public ParserRule getEXPRORRule() {
		return getEXPRORAccess().getRule();
	}

	//EXPRNOT:
	//	("not" LCs)? EXPREQ;
	public EXPRNOTElements getEXPRNOTAccess() {
		return pEXPRNOT;
	}
	
	public ParserRule getEXPRNOTRule() {
		return getEXPRNOTAccess().getRule();
	}

	//EXPREQ:
	//	EXPRSIMPLE LCs "=?" LCs EXPRSIMPLE | "(" EXPR ")";
	public EXPREQElements getEXPREQAccess() {
		return pEXPREQ;
	}
	
	public ParserRule getEXPREQRule() {
		return getEXPREQAccess().getRule();
	}

	/// * UNITES LEXICALES * / Variable:
	//	n=VAR;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//terminal VAR:
	//	"A".."Z" ("a".."z" | "A".."Z" | "0".."9")* CONF;
	public TerminalRule getVARRule() {
		return tVAR;
	} 

	//Symboles:
	//	SYM;
	public SymbolesElements getSymbolesAccess() {
		return pSymboles;
	}
	
	public ParserRule getSymbolesRule() {
		return getSymbolesAccess().getRule();
	}

	//terminal SYM:
	//	"a".."z" ("a".."z" | "A".."Z" | "0".."9")* CONF;
	public TerminalRule getSYMRule() {
		return tSYM;
	} 

	//Confort:
	//	CONF;
	public ConfortElements getConfortAccess() {
		return pConfort;
	}
	
	public ParserRule getConfortRule() {
		return getConfortAccess().getRule();
	}

	//terminal CONF:
	//	(("-" | "+" | "." | "/" | "_" | "&" | "->") ("a".."z" | "A".."Z" | "0".."9")+)* ("?" | "!");
	public TerminalRule getCONFRule() {
		return tCONF;
	} 

	////Ponctuation: PONCT;	
	////terminal PONCT : (','|';'|':'|'('|')'); 
	//LCs:
	//	LC?;
	public LCsElements getLCsAccess() {
		return pLCs;
	}
	
	public ParserRule getLCsRule() {
		return getLCsAccess().getRule();
	}

	//LC:
	//	SP | CR | TAB | LF;
	public LCElements getLCAccess() {
		return pLC;
	}
	
	public ParserRule getLCRule() {
		return getLCAccess().getRule();
	}

	//terminal SP:
	//	" ";
	public TerminalRule getSPRule() {
		return tSP;
	} 

	//terminal CR:
	//	"\n";
	public TerminalRule getCRRule() {
		return tCR;
	} 

	//terminal TAB:
	//	"\t";
	public TerminalRule getTABRule() {
		return tTAB;
	} 

	//terminal LF:
	//	"\r";
	public TerminalRule getLFRule() {
		return tLF;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
