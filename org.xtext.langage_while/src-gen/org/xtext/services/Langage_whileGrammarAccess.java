/*
 * generated by Xtext
 */
package org.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class Langage_whileGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProgAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProgFunctionParserRuleCall_0_0 = (RuleCall)cProgAssignment_0.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Model:
		//	(prog+=Function LC?)*;
		@Override public ParserRule getRule() { return rule; }

		//(prog+=Function LC?)*
		public Group getGroup() { return cGroup; }

		//prog+=Function
		public Assignment getProgAssignment_0() { return cProgAssignment_0; }

		//Function
		public RuleCall getProgFunctionParserRuleCall_0_0() { return cProgFunctionParserRuleCall_0_0; }

		//LC?
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSYMBParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cLCParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cDefAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDefDefinitionParserRuleCall_5_0 = (RuleCall)cDefAssignment_5.eContents().get(0);
		
		//Function:
		//	"function" LC name=SYMB ":" LC def=Definition;
		@Override public ParserRule getRule() { return rule; }

		//"function" LC name=SYMB ":" LC def=Definition
		public Group getGroup() { return cGroup; }

		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }

		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }

		//name=SYMB
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//SYMB
		public RuleCall getNameSYMBParserRuleCall_2_0() { return cNameSYMBParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//LC
		public RuleCall getLCParserRuleCall_4() { return cLCParserRuleCall_4; }

		//def=Definition
		public Assignment getDefAssignment_5() { return cDefAssignment_5; }

		//Definition
		public RuleCall getDefDefinitionParserRuleCall_5_0() { return cDefDefinitionParserRuleCall_5_0; }
	}

	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cInAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInInputParserRuleCall_2_0 = (RuleCall)cInAssignment_2.eContents().get(0);
		private final RuleCall cLCParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cPercentSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cComAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cComCommandsParserRuleCall_5_0 = (RuleCall)cComAssignment_5.eContents().get(0);
		private final RuleCall cLCParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cPercentSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cWriteKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final RuleCall cLCParserRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Assignment cOutAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cOutOutputParserRuleCall_10_0 = (RuleCall)cOutAssignment_10.eContents().get(0);
		
		//Definition:
		//	"read" LC in=Input LC "%" com=Commands LC "%" "write" LC out=Output;
		@Override public ParserRule getRule() { return rule; }

		//"read" LC in=Input LC "%" com=Commands LC "%" "write" LC out=Output
		public Group getGroup() { return cGroup; }

		//"read"
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }

		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }

		//in=Input
		public Assignment getInAssignment_2() { return cInAssignment_2; }

		//Input
		public RuleCall getInInputParserRuleCall_2_0() { return cInInputParserRuleCall_2_0; }

		//LC
		public RuleCall getLCParserRuleCall_3() { return cLCParserRuleCall_3; }

		//"%"
		public Keyword getPercentSignKeyword_4() { return cPercentSignKeyword_4; }

		//com=Commands
		public Assignment getComAssignment_5() { return cComAssignment_5; }

		//Commands
		public RuleCall getComCommandsParserRuleCall_5_0() { return cComCommandsParserRuleCall_5_0; }

		//LC
		public RuleCall getLCParserRuleCall_6() { return cLCParserRuleCall_6; }

		//"%"
		public Keyword getPercentSignKeyword_7() { return cPercentSignKeyword_7; }

		//"write"
		public Keyword getWriteKeyword_8() { return cWriteKeyword_8; }

		//LC
		public RuleCall getLCParserRuleCall_9() { return cLCParserRuleCall_9; }

		//out=Output
		public Assignment getOutAssignment_10() { return cOutAssignment_10; }

		//Output
		public RuleCall getOutOutputParserRuleCall_10_0() { return cOutOutputParserRuleCall_10_0; }
	}

	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVVARParserRuleCall_0_0 = (RuleCall)cVAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVVARParserRuleCall_1_1_0 = (RuleCall)cVAssignment_1_1.eContents().get(0);
		
		//Input:
		//	v+=VAR ("," v+=VAR)*;
		@Override public ParserRule getRule() { return rule; }

		//v+=VAR ("," v+=VAR)*
		public Group getGroup() { return cGroup; }

		//v+=VAR
		public Assignment getVAssignment_0() { return cVAssignment_0; }

		//VAR
		public RuleCall getVVARParserRuleCall_0_0() { return cVVARParserRuleCall_0_0; }

		//("," v+=VAR)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//v+=VAR
		public Assignment getVAssignment_1_1() { return cVAssignment_1_1; }

		//VAR
		public RuleCall getVVARParserRuleCall_1_1_0() { return cVVARParserRuleCall_1_1_0; }
	}

	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVVARParserRuleCall_0_0 = (RuleCall)cVAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVVARParserRuleCall_1_1_0 = (RuleCall)cVAssignment_1_1.eContents().get(0);
		
		//Output:
		//	v+=VAR ("," v+=VAR)*;
		@Override public ParserRule getRule() { return rule; }

		//v+=VAR ("," v+=VAR)*
		public Group getGroup() { return cGroup; }

		//v+=VAR
		public Assignment getVAssignment_0() { return cVAssignment_0; }

		//VAR
		public RuleCall getVVARParserRuleCall_0_0() { return cVVARParserRuleCall_0_0; }

		//("," v+=VAR)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//v+=VAR
		public Assignment getVAssignment_1_1() { return cVAssignment_1_1; }

		//VAR
		public RuleCall getVVARParserRuleCall_1_1_0() { return cVVARParserRuleCall_1_1_0; }
	}

	public class CommandsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Commands");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCCommandParserRuleCall_0_0 = (RuleCall)cCAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cCAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cCCommandParserRuleCall_1_2_0 = (RuleCall)cCAssignment_1_2.eContents().get(0);
		
		//Commands:
		//	c+=Command (";" LC c+=Command)*;
		@Override public ParserRule getRule() { return rule; }

		//c+=Command (";" LC c+=Command)*
		public Group getGroup() { return cGroup; }

		//c+=Command
		public Assignment getCAssignment_0() { return cCAssignment_0; }

		//Command
		public RuleCall getCCommandParserRuleCall_0_0() { return cCCommandParserRuleCall_0_0; }

		//(";" LC c+=Command)*
		public Group getGroup_1() { return cGroup_1; }

		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }

		//LC
		public RuleCall getLCParserRuleCall_1_1() { return cLCParserRuleCall_1_1; }

		//c+=Command
		public Assignment getCAssignment_1_2() { return cCAssignment_1_2; }

		//Command
		public RuleCall getCCommandParserRuleCall_1_2_0() { return cCCommandParserRuleCall_1_2_0; }
	}

	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNopAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cNopNopKeyword_0_0 = (Keyword)cNopAssignment_0.eContents().get(0);
		private final Assignment cAssignAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAssignAssignParserRuleCall_1_0 = (RuleCall)cAssignAssignment_1.eContents().get(0);
		private final Assignment cWhAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cWhWhileParserRuleCall_2_0 = (RuleCall)cWhAssignment_2.eContents().get(0);
		private final Assignment cForAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cForForParserRuleCall_3_0 = (RuleCall)cForAssignment_3.eContents().get(0);
		private final Assignment cIfAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cIfIfParserRuleCall_4_0 = (RuleCall)cIfAssignment_4.eContents().get(0);
		private final Assignment cForeAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cForeForeachParserRuleCall_5_0 = (RuleCall)cForeAssignment_5.eContents().get(0);
		private final Assignment cIfcAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cIfcIfconfortParserRuleCall_6_0 = (RuleCall)cIfcAssignment_6.eContents().get(0);
		
		//Command:
		//	nop="nop" | assign=Assign | wh=While | for=For | if=If | fore=Foreach | ifc=Ifconfort;
		@Override public ParserRule getRule() { return rule; }

		//nop="nop" | assign=Assign | wh=While | for=For | if=If | fore=Foreach | ifc=Ifconfort
		public Alternatives getAlternatives() { return cAlternatives; }

		//nop="nop"
		public Assignment getNopAssignment_0() { return cNopAssignment_0; }

		//"nop"
		public Keyword getNopNopKeyword_0_0() { return cNopNopKeyword_0_0; }

		//assign=Assign
		public Assignment getAssignAssignment_1() { return cAssignAssignment_1; }

		//Assign
		public RuleCall getAssignAssignParserRuleCall_1_0() { return cAssignAssignParserRuleCall_1_0; }

		//wh=While
		public Assignment getWhAssignment_2() { return cWhAssignment_2; }

		//While
		public RuleCall getWhWhileParserRuleCall_2_0() { return cWhWhileParserRuleCall_2_0; }

		//for=For
		public Assignment getForAssignment_3() { return cForAssignment_3; }

		//For
		public RuleCall getForForParserRuleCall_3_0() { return cForForParserRuleCall_3_0; }

		//if=If
		public Assignment getIfAssignment_4() { return cIfAssignment_4; }

		//If
		public RuleCall getIfIfParserRuleCall_4_0() { return cIfIfParserRuleCall_4_0; }

		//fore=Foreach
		public Assignment getForeAssignment_5() { return cForeAssignment_5; }

		//Foreach
		public RuleCall getForeForeachParserRuleCall_5_0() { return cForeForeachParserRuleCall_5_0; }

		//ifc=Ifconfort
		public Assignment getIfcAssignment_6() { return cIfcAssignment_6; }

		//Ifconfort
		public RuleCall getIfcIfconfortParserRuleCall_6_0() { return cIfcIfconfortParserRuleCall_6_0; }
	}

	public class AssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVsVarsParserRuleCall_0_0 = (RuleCall)cVsAssignment_0.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cLCParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cExAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExExprsParserRuleCall_4_0 = (RuleCall)cExAssignment_4.eContents().get(0);
		
		//Assign:
		//	vs=Vars LC ":=" LC ex=Exprs;
		@Override public ParserRule getRule() { return rule; }

		//vs=Vars LC ":=" LC ex=Exprs
		public Group getGroup() { return cGroup; }

		//vs=Vars
		public Assignment getVsAssignment_0() { return cVsAssignment_0; }

		//Vars
		public RuleCall getVsVarsParserRuleCall_0_0() { return cVsVarsParserRuleCall_0_0; }

		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }

		//LC
		public RuleCall getLCParserRuleCall_3() { return cLCParserRuleCall_3; }

		//ex=Exprs
		public Assignment getExAssignment_4() { return cExAssignment_4; }

		//Exprs
		public RuleCall getExExprsParserRuleCall_4_0() { return cExExprsParserRuleCall_4_0; }
	}

	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cExAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExExprParserRuleCall_2_0 = (RuleCall)cExAssignment_2.eContents().get(0);
		private final RuleCall cLCParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cLCParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cCAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCCommandsParserRuleCall_6_0 = (RuleCall)cCAssignment_6.eContents().get(0);
		private final RuleCall cLCParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cOdKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//While:
		//	"while" LC ex=Expr LC "do" LC c=Commands LC "od";
		@Override public ParserRule getRule() { return rule; }

		//"while" LC ex=Expr LC "do" LC c=Commands LC "od"
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }

		//ex=Expr
		public Assignment getExAssignment_2() { return cExAssignment_2; }

		//Expr
		public RuleCall getExExprParserRuleCall_2_0() { return cExExprParserRuleCall_2_0; }

		//LC
		public RuleCall getLCParserRuleCall_3() { return cLCParserRuleCall_3; }

		//"do"
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }

		//LC
		public RuleCall getLCParserRuleCall_5() { return cLCParserRuleCall_5; }

		//c=Commands
		public Assignment getCAssignment_6() { return cCAssignment_6; }

		//Commands
		public RuleCall getCCommandsParserRuleCall_6_0() { return cCCommandsParserRuleCall_6_0; }

		//LC
		public RuleCall getLCParserRuleCall_7() { return cLCParserRuleCall_7; }

		//"od"
		public Keyword getOdKeyword_8() { return cOdKeyword_8; }
	}

	public class ForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "For");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cExAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExExprParserRuleCall_2_0 = (RuleCall)cExAssignment_2.eContents().get(0);
		private final RuleCall cLCParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cLCParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cCAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCCommandsParserRuleCall_6_0 = (RuleCall)cCAssignment_6.eContents().get(0);
		private final RuleCall cLCParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cOdKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//For:
		//	"for" LC ex=Expr LC "do" LC c=Commands LC "od";
		@Override public ParserRule getRule() { return rule; }

		//"for" LC ex=Expr LC "do" LC c=Commands LC "od"
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }

		//ex=Expr
		public Assignment getExAssignment_2() { return cExAssignment_2; }

		//Expr
		public RuleCall getExExprParserRuleCall_2_0() { return cExExprParserRuleCall_2_0; }

		//LC
		public RuleCall getLCParserRuleCall_3() { return cLCParserRuleCall_3; }

		//"do"
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }

		//LC
		public RuleCall getLCParserRuleCall_5() { return cLCParserRuleCall_5; }

		//c=Commands
		public Assignment getCAssignment_6() { return cCAssignment_6; }

		//Commands
		public RuleCall getCCommandsParserRuleCall_6_0() { return cCCommandsParserRuleCall_6_0; }

		//LC
		public RuleCall getLCParserRuleCall_7() { return cLCParserRuleCall_7; }

		//"od"
		public Keyword getOdKeyword_8() { return cOdKeyword_8; }
	}

	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cExAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExExprParserRuleCall_2_0 = (RuleCall)cExAssignment_2.eContents().get(0);
		private final RuleCall cLCParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cThenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cLCParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cCtAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCtCommandsParserRuleCall_6_0 = (RuleCall)cCtAssignment_6.eContents().get(0);
		private final RuleCall cLCParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cElseKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final RuleCall cLCParserRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Assignment cCeAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cCeCommandsParserRuleCall_10_0 = (RuleCall)cCeAssignment_10.eContents().get(0);
		private final RuleCall cLCParserRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final Keyword cFiKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//If:
		//	"if" LC ex=Expr LC "then" LC ct=Commands LC "else" LC ce=Commands LC "fi";
		@Override public ParserRule getRule() { return rule; }

		//"if" LC ex=Expr LC "then" LC ct=Commands LC "else" LC ce=Commands LC "fi"
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }

		//ex=Expr
		public Assignment getExAssignment_2() { return cExAssignment_2; }

		//Expr
		public RuleCall getExExprParserRuleCall_2_0() { return cExExprParserRuleCall_2_0; }

		//LC
		public RuleCall getLCParserRuleCall_3() { return cLCParserRuleCall_3; }

		//"then"
		public Keyword getThenKeyword_4() { return cThenKeyword_4; }

		//LC
		public RuleCall getLCParserRuleCall_5() { return cLCParserRuleCall_5; }

		//ct=Commands
		public Assignment getCtAssignment_6() { return cCtAssignment_6; }

		//Commands
		public RuleCall getCtCommandsParserRuleCall_6_0() { return cCtCommandsParserRuleCall_6_0; }

		//LC
		public RuleCall getLCParserRuleCall_7() { return cLCParserRuleCall_7; }

		//"else"
		public Keyword getElseKeyword_8() { return cElseKeyword_8; }

		//LC
		public RuleCall getLCParserRuleCall_9() { return cLCParserRuleCall_9; }

		//ce=Commands
		public Assignment getCeAssignment_10() { return cCeAssignment_10; }

		//Commands
		public RuleCall getCeCommandsParserRuleCall_10_0() { return cCeCommandsParserRuleCall_10_0; }

		//LC
		public RuleCall getLCParserRuleCall_11() { return cLCParserRuleCall_11; }

		//"fi"
		public Keyword getFiKeyword_12() { return cFiKeyword_12; }
	}

	public class ForeachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Foreach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cEx1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEx1ExprParserRuleCall_2_0 = (RuleCall)cEx1Assignment_2.eContents().get(0);
		private final RuleCall cLCParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cLCParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cEx2Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEx2ExprParserRuleCall_6_0 = (RuleCall)cEx2Assignment_6.eContents().get(0);
		private final RuleCall cLCParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cDoKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final RuleCall cLCParserRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Assignment cCAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cCCommandsParserRuleCall_10_0 = (RuleCall)cCAssignment_10.eContents().get(0);
		private final RuleCall cLCParserRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final Keyword cOdKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Foreach:
		//	"foreach" LC ex1=Expr LC "in" LC ex2=Expr LC "do" LC c=Commands LC "od";
		@Override public ParserRule getRule() { return rule; }

		//"foreach" LC ex1=Expr LC "in" LC ex2=Expr LC "do" LC c=Commands LC "od"
		public Group getGroup() { return cGroup; }

		//"foreach"
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }

		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }

		//ex1=Expr
		public Assignment getEx1Assignment_2() { return cEx1Assignment_2; }

		//Expr
		public RuleCall getEx1ExprParserRuleCall_2_0() { return cEx1ExprParserRuleCall_2_0; }

		//LC
		public RuleCall getLCParserRuleCall_3() { return cLCParserRuleCall_3; }

		//"in"
		public Keyword getInKeyword_4() { return cInKeyword_4; }

		//LC
		public RuleCall getLCParserRuleCall_5() { return cLCParserRuleCall_5; }

		//ex2=Expr
		public Assignment getEx2Assignment_6() { return cEx2Assignment_6; }

		//Expr
		public RuleCall getEx2ExprParserRuleCall_6_0() { return cEx2ExprParserRuleCall_6_0; }

		//LC
		public RuleCall getLCParserRuleCall_7() { return cLCParserRuleCall_7; }

		//"do"
		public Keyword getDoKeyword_8() { return cDoKeyword_8; }

		//LC
		public RuleCall getLCParserRuleCall_9() { return cLCParserRuleCall_9; }

		//c=Commands
		public Assignment getCAssignment_10() { return cCAssignment_10; }

		//Commands
		public RuleCall getCCommandsParserRuleCall_10_0() { return cCCommandsParserRuleCall_10_0; }

		//LC
		public RuleCall getLCParserRuleCall_11() { return cLCParserRuleCall_11; }

		//"od"
		public Keyword getOdKeyword_12() { return cOdKeyword_12; }
	}

	public class IfconfortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ifconfort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cExAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExExprParserRuleCall_2_0 = (RuleCall)cExAssignment_2.eContents().get(0);
		private final RuleCall cLCParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cThenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cLCParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cCAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCCommandsParserRuleCall_6_0 = (RuleCall)cCAssignment_6.eContents().get(0);
		private final RuleCall cLCParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cFiKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Ifconfort:
		//	"if" LC ex=Expr LC "then" LC c=Commands LC "fi";
		@Override public ParserRule getRule() { return rule; }

		//"if" LC ex=Expr LC "then" LC c=Commands LC "fi"
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }

		//ex=Expr
		public Assignment getExAssignment_2() { return cExAssignment_2; }

		//Expr
		public RuleCall getExExprParserRuleCall_2_0() { return cExExprParserRuleCall_2_0; }

		//LC
		public RuleCall getLCParserRuleCall_3() { return cLCParserRuleCall_3; }

		//"then"
		public Keyword getThenKeyword_4() { return cThenKeyword_4; }

		//LC
		public RuleCall getLCParserRuleCall_5() { return cLCParserRuleCall_5; }

		//c=Commands
		public Assignment getCAssignment_6() { return cCAssignment_6; }

		//Commands
		public RuleCall getCCommandsParserRuleCall_6_0() { return cCCommandsParserRuleCall_6_0; }

		//LC
		public RuleCall getLCParserRuleCall_7() { return cLCParserRuleCall_7; }

		//"fi"
		public Keyword getFiKeyword_8() { return cFiKeyword_8; }
	}

	public class VarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Vars");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVsVARParserRuleCall_0_0 = (RuleCall)cVsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVsVARParserRuleCall_1_1_0 = (RuleCall)cVsAssignment_1_1.eContents().get(0);
		
		//Vars:
		//	vs+=VAR ("," vs+=VAR)*;
		@Override public ParserRule getRule() { return rule; }

		//vs+=VAR ("," vs+=VAR)*
		public Group getGroup() { return cGroup; }

		//vs+=VAR
		public Assignment getVsAssignment_0() { return cVsAssignment_0; }

		//VAR
		public RuleCall getVsVARParserRuleCall_0_0() { return cVsVARParserRuleCall_0_0; }

		//("," vs+=VAR)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//vs+=VAR
		public Assignment getVsAssignment_1_1() { return cVsAssignment_1_1; }

		//VAR
		public RuleCall getVsVARParserRuleCall_1_1_0() { return cVsVARParserRuleCall_1_1_0; }
	}

	public class ExprsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exprs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExExprParserRuleCall_0_0 = (RuleCall)cExAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExExprParserRuleCall_1_1_0 = (RuleCall)cExAssignment_1_1.eContents().get(0);
		
		//Exprs:
		//	ex+=Expr ("," ex+=Expr)*;
		@Override public ParserRule getRule() { return rule; }

		//ex+=Expr ("," ex+=Expr)*
		public Group getGroup() { return cGroup; }

		//ex+=Expr
		public Assignment getExAssignment_0() { return cExAssignment_0; }

		//Expr
		public RuleCall getExExprParserRuleCall_0_0() { return cExExprParserRuleCall_0_0; }

		//("," ex+=Expr)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//ex+=Expr
		public Assignment getExAssignment_1_1() { return cExAssignment_1_1; }

		//Expr
		public RuleCall getExExprParserRuleCall_1_1_0() { return cExExprParserRuleCall_1_1_0; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExsExprSimpleParserRuleCall_0_0 = (RuleCall)cExsAssignment_0.eContents().get(0);
		private final Assignment cExaAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExaExprAndParserRuleCall_1_0 = (RuleCall)cExaAssignment_1.eContents().get(0);
		
		//Expr:
		//	exs=ExprSimple | exa=ExprAnd;
		@Override public ParserRule getRule() { return rule; }

		//exs=ExprSimple | exa=ExprAnd
		public Alternatives getAlternatives() { return cAlternatives; }

		//exs=ExprSimple
		public Assignment getExsAssignment_0() { return cExsAssignment_0; }

		//ExprSimple
		public RuleCall getExsExprSimpleParserRuleCall_0_0() { return cExsExprSimpleParserRuleCall_0_0; }

		//exa=ExprAnd
		public Assignment getExaAssignment_1() { return cExaAssignment_1; }

		//ExprAnd
		public RuleCall getExaExprAndParserRuleCall_1_0() { return cExaExprAndParserRuleCall_1_0; }
	}

	public class ExprSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprSimple");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNilAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cNilNilKeyword_0_0 = (Keyword)cNilAssignment_0.eContents().get(0);
		private final Assignment cVAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVVARParserRuleCall_1_0 = (RuleCall)cVAssignment_1.eContents().get(0);
		private final Assignment cSymAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSymSYMBParserRuleCall_2_0 = (RuleCall)cSymAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMotAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cMotAlternatives_3_1_0 = (Alternatives)cMotAssignment_3_1.eContents().get(0);
		private final Keyword cMotConsKeyword_3_1_0_0 = (Keyword)cMotAlternatives_3_1_0.eContents().get(0);
		private final Keyword cMotListKeyword_3_1_0_1 = (Keyword)cMotAlternatives_3_1_0.eContents().get(1);
		private final Assignment cLexAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cLexLExprParserRuleCall_3_2_0 = (RuleCall)cLexAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMotAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Alternatives cMotAlternatives_4_1_0 = (Alternatives)cMotAssignment_4_1.eContents().get(0);
		private final Keyword cMotHdKeyword_4_1_0_0 = (Keyword)cMotAlternatives_4_1_0.eContents().get(0);
		private final Keyword cMotTlKeyword_4_1_0_1 = (Keyword)cMotAlternatives_4_1_0.eContents().get(1);
		private final RuleCall cLCParserRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Assignment cExAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cExExprParserRuleCall_4_3_0 = (RuleCall)cExAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSymAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSymSYMBParserRuleCall_5_1_0 = (RuleCall)cSymAssignment_5_1.eContents().get(0);
		private final Assignment cLexAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cLexLExprParserRuleCall_5_2_0 = (RuleCall)cLexAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//ExprSimple:
		//	nil="nil" | v=VAR | sym=SYMB | "(" mot=("cons" | "list") lex=LExpr ")" | "(" mot=("hd" | "tl") LC ex=Expr ")" | "("
		//	sym=SYMB lex=LExpr ")";
		@Override public ParserRule getRule() { return rule; }

		//nil="nil" | v=VAR | sym=SYMB | "(" mot=("cons" | "list") lex=LExpr ")" | "(" mot=("hd" | "tl") LC ex=Expr ")" | "("
		//sym=SYMB lex=LExpr ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//nil="nil"
		public Assignment getNilAssignment_0() { return cNilAssignment_0; }

		//"nil"
		public Keyword getNilNilKeyword_0_0() { return cNilNilKeyword_0_0; }

		//v=VAR
		public Assignment getVAssignment_1() { return cVAssignment_1; }

		//VAR
		public RuleCall getVVARParserRuleCall_1_0() { return cVVARParserRuleCall_1_0; }

		//sym=SYMB
		public Assignment getSymAssignment_2() { return cSymAssignment_2; }

		//SYMB
		public RuleCall getSymSYMBParserRuleCall_2_0() { return cSymSYMBParserRuleCall_2_0; }

		//"(" mot=("cons" | "list") lex=LExpr ")"
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//mot=("cons" | "list")
		public Assignment getMotAssignment_3_1() { return cMotAssignment_3_1; }

		//"cons" | "list"
		public Alternatives getMotAlternatives_3_1_0() { return cMotAlternatives_3_1_0; }

		//"cons"
		public Keyword getMotConsKeyword_3_1_0_0() { return cMotConsKeyword_3_1_0_0; }

		//"list"
		public Keyword getMotListKeyword_3_1_0_1() { return cMotListKeyword_3_1_0_1; }

		//lex=LExpr
		public Assignment getLexAssignment_3_2() { return cLexAssignment_3_2; }

		//LExpr
		public RuleCall getLexLExprParserRuleCall_3_2_0() { return cLexLExprParserRuleCall_3_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }

		//"(" mot=("hd" | "tl") LC ex=Expr ")"
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//mot=("hd" | "tl")
		public Assignment getMotAssignment_4_1() { return cMotAssignment_4_1; }

		//"hd" | "tl"
		public Alternatives getMotAlternatives_4_1_0() { return cMotAlternatives_4_1_0; }

		//"hd"
		public Keyword getMotHdKeyword_4_1_0_0() { return cMotHdKeyword_4_1_0_0; }

		//"tl"
		public Keyword getMotTlKeyword_4_1_0_1() { return cMotTlKeyword_4_1_0_1; }

		//LC
		public RuleCall getLCParserRuleCall_4_2() { return cLCParserRuleCall_4_2; }

		//ex=Expr
		public Assignment getExAssignment_4_3() { return cExAssignment_4_3; }

		//Expr
		public RuleCall getExExprParserRuleCall_4_3_0() { return cExExprParserRuleCall_4_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }

		//"(" sym=SYMB lex=LExpr ")"
		public Group getGroup_5() { return cGroup_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }

		//sym=SYMB
		public Assignment getSymAssignment_5_1() { return cSymAssignment_5_1; }

		//SYMB
		public RuleCall getSymSYMBParserRuleCall_5_1_0() { return cSymSYMBParserRuleCall_5_1_0; }

		//lex=LExpr
		public Assignment getLexAssignment_5_2() { return cLexAssignment_5_2; }

		//LExpr
		public RuleCall getLexLExprParserRuleCall_5_2_0() { return cLexLExprParserRuleCall_5_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
	}

	public class LExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLCParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cEAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEExprParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		
		//LExpr:
		//	(LC e+=Expr)+;
		@Override public ParserRule getRule() { return rule; }

		//(LC e+=Expr)+
		public Group getGroup() { return cGroup; }

		//LC
		public RuleCall getLCParserRuleCall_0() { return cLCParserRuleCall_0; }

		//e+=Expr
		public Assignment getEAssignment_1() { return cEAssignment_1; }

		//Expr
		public RuleCall getEExprParserRuleCall_1_0() { return cEExprParserRuleCall_1_0; }
	}

	public class ExprAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExo1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExo1ExprOrParserRuleCall_0_0 = (RuleCall)cExo1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cLCParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cLCParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cExo2Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExo2ExprOrParserRuleCall_1_3_0 = (RuleCall)cExo2Assignment_1_3.eContents().get(0);
		
		//ExprAnd:
		//	exo1=ExprOr (LC "and" LC exo2+=ExprOr)*;
		@Override public ParserRule getRule() { return rule; }

		//exo1=ExprOr (LC "and" LC exo2+=ExprOr)*
		public Group getGroup() { return cGroup; }

		//exo1=ExprOr
		public Assignment getExo1Assignment_0() { return cExo1Assignment_0; }

		//ExprOr
		public RuleCall getExo1ExprOrParserRuleCall_0_0() { return cExo1ExprOrParserRuleCall_0_0; }

		//(LC "and" LC exo2+=ExprOr)*
		public Group getGroup_1() { return cGroup_1; }

		//LC
		public RuleCall getLCParserRuleCall_1_0() { return cLCParserRuleCall_1_0; }

		//"and"
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }

		//LC
		public RuleCall getLCParserRuleCall_1_2() { return cLCParserRuleCall_1_2; }

		//exo2+=ExprOr
		public Assignment getExo2Assignment_1_3() { return cExo2Assignment_1_3; }

		//ExprOr
		public RuleCall getExo2ExprOrParserRuleCall_1_3_0() { return cExo2ExprOrParserRuleCall_1_3_0; }
	}

	public class ExprOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExn1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExn1ExprNotParserRuleCall_0_0 = (RuleCall)cExn1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cLCParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cLCParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cExn2Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExn2ExprNotParserRuleCall_1_3_0 = (RuleCall)cExn2Assignment_1_3.eContents().get(0);
		
		//ExprOr:
		//	exn1=ExprNot (LC "or" LC exn2+=ExprNot)*;
		@Override public ParserRule getRule() { return rule; }

		//exn1=ExprNot (LC "or" LC exn2+=ExprNot)*
		public Group getGroup() { return cGroup; }

		//exn1=ExprNot
		public Assignment getExn1Assignment_0() { return cExn1Assignment_0; }

		//ExprNot
		public RuleCall getExn1ExprNotParserRuleCall_0_0() { return cExn1ExprNotParserRuleCall_0_0; }

		//(LC "or" LC exn2+=ExprNot)*
		public Group getGroup_1() { return cGroup_1; }

		//LC
		public RuleCall getLCParserRuleCall_1_0() { return cLCParserRuleCall_1_0; }

		//"or"
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }

		//LC
		public RuleCall getLCParserRuleCall_1_2() { return cLCParserRuleCall_1_2; }

		//exn2+=ExprNot
		public Assignment getExn2Assignment_1_3() { return cExn2Assignment_1_3; }

		//ExprNot
		public RuleCall getExn2ExprNotParserRuleCall_1_3_0() { return cExn2ExprNotParserRuleCall_1_3_0; }
	}

	public class ExprNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprNot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNotKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cLCParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cExQ1Assignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExQ1ExprEqParserRuleCall_0_2_0 = (RuleCall)cExQ1Assignment_0_2.eContents().get(0);
		private final Assignment cExQ2Assignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExQ2ExprEqParserRuleCall_1_0 = (RuleCall)cExQ2Assignment_1.eContents().get(0);
		
		//ExprNot:
		//	"not" LC exQ1=ExprEq | exQ2=ExprEq;
		@Override public ParserRule getRule() { return rule; }

		//"not" LC exQ1=ExprEq | exQ2=ExprEq
		public Alternatives getAlternatives() { return cAlternatives; }

		//"not" LC exQ1=ExprEq
		public Group getGroup_0() { return cGroup_0; }

		//"not"
		public Keyword getNotKeyword_0_0() { return cNotKeyword_0_0; }

		//LC
		public RuleCall getLCParserRuleCall_0_1() { return cLCParserRuleCall_0_1; }

		//exQ1=ExprEq
		public Assignment getExQ1Assignment_0_2() { return cExQ1Assignment_0_2; }

		//ExprEq
		public RuleCall getExQ1ExprEqParserRuleCall_0_2_0() { return cExQ1ExprEqParserRuleCall_0_2_0; }

		//exQ2=ExprEq
		public Assignment getExQ2Assignment_1() { return cExQ2Assignment_1; }

		//ExprEq
		public RuleCall getExQ2ExprEqParserRuleCall_1_0() { return cExQ2ExprEqParserRuleCall_1_0; }
	}

	public class ExprEqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprEq");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExS1Assignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExS1ExprSimpleParserRuleCall_0_1_0 = (RuleCall)cExS1Assignment_0_1.eContents().get(0);
		private final Keyword cEqualsSignQuestionMarkKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cExS2Assignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cExS2ExprSimpleParserRuleCall_0_3_0 = (RuleCall)cExS2Assignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExExprParserRuleCall_1_1_0 = (RuleCall)cExAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ExprEq:
		//	"(" exS1=ExprSimple "=?" exS2=ExprSimple ")" | "(" ex=Expr ")";
		@Override public ParserRule getRule() { return rule; }

		//"(" exS1=ExprSimple "=?" exS2=ExprSimple ")" | "(" ex=Expr ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" exS1=ExprSimple "=?" exS2=ExprSimple ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//exS1=ExprSimple
		public Assignment getExS1Assignment_0_1() { return cExS1Assignment_0_1; }

		//ExprSimple
		public RuleCall getExS1ExprSimpleParserRuleCall_0_1_0() { return cExS1ExprSimpleParserRuleCall_0_1_0; }

		//"=?"
		public Keyword getEqualsSignQuestionMarkKeyword_0_2() { return cEqualsSignQuestionMarkKeyword_0_2; }

		//exS2=ExprSimple
		public Assignment getExS2Assignment_0_3() { return cExS2Assignment_0_3; }

		//ExprSimple
		public RuleCall getExS2ExprSimpleParserRuleCall_0_3_0() { return cExS2ExprSimpleParserRuleCall_0_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }

		//"(" ex=Expr ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//ex=Expr
		public Assignment getExAssignment_1_1() { return cExAssignment_1_1; }

		//Expr
		public RuleCall getExExprParserRuleCall_1_1_0() { return cExExprParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class VARElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VAR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBvAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBvBASEVARTerminalRuleCall_0_0 = (RuleCall)cBvAssignment_0.eContents().get(0);
		private final Assignment cCfAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCfCONFTerminalRuleCall_1_0 = (RuleCall)cCfAssignment_1.eContents().get(0);
		
		//VAR:
		//	bv=BASEVAR cf=CONF;
		@Override public ParserRule getRule() { return rule; }

		//bv=BASEVAR cf=CONF
		public Group getGroup() { return cGroup; }

		//bv=BASEVAR
		public Assignment getBvAssignment_0() { return cBvAssignment_0; }

		//BASEVAR
		public RuleCall getBvBASEVARTerminalRuleCall_0_0() { return cBvBASEVARTerminalRuleCall_0_0; }

		//cf=CONF
		public Assignment getCfAssignment_1() { return cCfAssignment_1; }

		//CONF
		public RuleCall getCfCONFTerminalRuleCall_1_0() { return cCfCONFTerminalRuleCall_1_0; }
	}

	public class SYMBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SYMB");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBsBASESYMBTerminalRuleCall_0_0 = (RuleCall)cBsAssignment_0.eContents().get(0);
		private final Assignment cCfAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCfCONFTerminalRuleCall_1_0 = (RuleCall)cCfAssignment_1.eContents().get(0);
		
		//SYMB:
		//	bs=BASESYMB cf=CONF;
		@Override public ParserRule getRule() { return rule; }

		//bs=BASESYMB cf=CONF
		public Group getGroup() { return cGroup; }

		//bs=BASESYMB
		public Assignment getBsAssignment_0() { return cBsAssignment_0; }

		//BASESYMB
		public RuleCall getBsBASESYMBTerminalRuleCall_0_0() { return cBsBASESYMBTerminalRuleCall_0_0; }

		//cf=CONF
		public Assignment getCfAssignment_1() { return cCfAssignment_1; }

		//CONF
		public RuleCall getCfCONFTerminalRuleCall_1_0() { return cCfCONFTerminalRuleCall_1_0; }
	}

	public class LCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LC");
		private final RuleCall cLCsParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LC:
		//	LCs?;
		@Override public ParserRule getRule() { return rule; }

		//LCs?
		public RuleCall getLCsParserRuleCall() { return cLCsParserRuleCall; }
	}

	public class LCsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LCs");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSPTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCRTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTABTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLFTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//LCs:
		//	SP | CR | TAB | LF;
		@Override public ParserRule getRule() { return rule; }

		//SP | CR | TAB | LF
		public Alternatives getAlternatives() { return cAlternatives; }

		//SP
		public RuleCall getSPTerminalRuleCall_0() { return cSPTerminalRuleCall_0; }

		//CR
		public RuleCall getCRTerminalRuleCall_1() { return cCRTerminalRuleCall_1; }

		//TAB
		public RuleCall getTABTerminalRuleCall_2() { return cTABTerminalRuleCall_2; }

		//LF
		public RuleCall getLFTerminalRuleCall_3() { return cLFTerminalRuleCall_3; }
	}
	
	
	private final ModelElements pModel;
	private final FunctionElements pFunction;
	private final DefinitionElements pDefinition;
	private final InputElements pInput;
	private final OutputElements pOutput;
	private final CommandsElements pCommands;
	private final CommandElements pCommand;
	private final AssignElements pAssign;
	private final WhileElements pWhile;
	private final ForElements pFor;
	private final IfElements pIf;
	private final ForeachElements pForeach;
	private final IfconfortElements pIfconfort;
	private final VarsElements pVars;
	private final ExprsElements pExprs;
	private final ExprElements pExpr;
	private final ExprSimpleElements pExprSimple;
	private final LExprElements pLExpr;
	private final ExprAndElements pExprAnd;
	private final ExprOrElements pExprOr;
	private final ExprNotElements pExprNot;
	private final ExprEqElements pExprEq;
	private final VARElements pVAR;
	private final TerminalRule tBASEVAR;
	private final SYMBElements pSYMB;
	private final TerminalRule tBASESYMB;
	private final TerminalRule tCONF;
	private final LCElements pLC;
	private final LCsElements pLCs;
	private final TerminalRule tSP;
	private final TerminalRule tCR;
	private final TerminalRule tTAB;
	private final TerminalRule tLF;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Langage_whileGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pFunction = new FunctionElements();
		this.pDefinition = new DefinitionElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
		this.pCommands = new CommandsElements();
		this.pCommand = new CommandElements();
		this.pAssign = new AssignElements();
		this.pWhile = new WhileElements();
		this.pFor = new ForElements();
		this.pIf = new IfElements();
		this.pForeach = new ForeachElements();
		this.pIfconfort = new IfconfortElements();
		this.pVars = new VarsElements();
		this.pExprs = new ExprsElements();
		this.pExpr = new ExprElements();
		this.pExprSimple = new ExprSimpleElements();
		this.pLExpr = new LExprElements();
		this.pExprAnd = new ExprAndElements();
		this.pExprOr = new ExprOrElements();
		this.pExprNot = new ExprNotElements();
		this.pExprEq = new ExprEqElements();
		this.pVAR = new VARElements();
		this.tBASEVAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BASEVAR");
		this.pSYMB = new SYMBElements();
		this.tBASESYMB = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BASESYMB");
		this.tCONF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CONF");
		this.pLC = new LCElements();
		this.pLCs = new LCsElements();
		this.tSP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SP");
		this.tCR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CR");
		this.tTAB = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TAB");
		this.tLF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LF");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.Langage_while".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	(prog+=Function LC?)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Function:
	//	"function" LC name=SYMB ":" LC def=Definition;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//Definition:
	//	"read" LC in=Input LC "%" com=Commands LC "%" "write" LC out=Output;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	//Input:
	//	v+=VAR ("," v+=VAR)*;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}

	//Output:
	//	v+=VAR ("," v+=VAR)*;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}

	//Commands:
	//	c+=Command (";" LC c+=Command)*;
	public CommandsElements getCommandsAccess() {
		return pCommands;
	}
	
	public ParserRule getCommandsRule() {
		return getCommandsAccess().getRule();
	}

	//Command:
	//	nop="nop" | assign=Assign | wh=While | for=For | if=If | fore=Foreach | ifc=Ifconfort;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}

	//Assign:
	//	vs=Vars LC ":=" LC ex=Exprs;
	public AssignElements getAssignAccess() {
		return pAssign;
	}
	
	public ParserRule getAssignRule() {
		return getAssignAccess().getRule();
	}

	//While:
	//	"while" LC ex=Expr LC "do" LC c=Commands LC "od";
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}

	//For:
	//	"for" LC ex=Expr LC "do" LC c=Commands LC "od";
	public ForElements getForAccess() {
		return pFor;
	}
	
	public ParserRule getForRule() {
		return getForAccess().getRule();
	}

	//If:
	//	"if" LC ex=Expr LC "then" LC ct=Commands LC "else" LC ce=Commands LC "fi";
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}

	//Foreach:
	//	"foreach" LC ex1=Expr LC "in" LC ex2=Expr LC "do" LC c=Commands LC "od";
	public ForeachElements getForeachAccess() {
		return pForeach;
	}
	
	public ParserRule getForeachRule() {
		return getForeachAccess().getRule();
	}

	//Ifconfort:
	//	"if" LC ex=Expr LC "then" LC c=Commands LC "fi";
	public IfconfortElements getIfconfortAccess() {
		return pIfconfort;
	}
	
	public ParserRule getIfconfortRule() {
		return getIfconfortAccess().getRule();
	}

	//Vars:
	//	vs+=VAR ("," vs+=VAR)*;
	public VarsElements getVarsAccess() {
		return pVars;
	}
	
	public ParserRule getVarsRule() {
		return getVarsAccess().getRule();
	}

	//Exprs:
	//	ex+=Expr ("," ex+=Expr)*;
	public ExprsElements getExprsAccess() {
		return pExprs;
	}
	
	public ParserRule getExprsRule() {
		return getExprsAccess().getRule();
	}

	//Expr:
	//	exs=ExprSimple | exa=ExprAnd;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//ExprSimple:
	//	nil="nil" | v=VAR | sym=SYMB | "(" mot=("cons" | "list") lex=LExpr ")" | "(" mot=("hd" | "tl") LC ex=Expr ")" | "("
	//	sym=SYMB lex=LExpr ")";
	public ExprSimpleElements getExprSimpleAccess() {
		return pExprSimple;
	}
	
	public ParserRule getExprSimpleRule() {
		return getExprSimpleAccess().getRule();
	}

	//LExpr:
	//	(LC e+=Expr)+;
	public LExprElements getLExprAccess() {
		return pLExpr;
	}
	
	public ParserRule getLExprRule() {
		return getLExprAccess().getRule();
	}

	//ExprAnd:
	//	exo1=ExprOr (LC "and" LC exo2+=ExprOr)*;
	public ExprAndElements getExprAndAccess() {
		return pExprAnd;
	}
	
	public ParserRule getExprAndRule() {
		return getExprAndAccess().getRule();
	}

	//ExprOr:
	//	exn1=ExprNot (LC "or" LC exn2+=ExprNot)*;
	public ExprOrElements getExprOrAccess() {
		return pExprOr;
	}
	
	public ParserRule getExprOrRule() {
		return getExprOrAccess().getRule();
	}

	//ExprNot:
	//	"not" LC exQ1=ExprEq | exQ2=ExprEq;
	public ExprNotElements getExprNotAccess() {
		return pExprNot;
	}
	
	public ParserRule getExprNotRule() {
		return getExprNotAccess().getRule();
	}

	//ExprEq:
	//	"(" exS1=ExprSimple "=?" exS2=ExprSimple ")" | "(" ex=Expr ")";
	public ExprEqElements getExprEqAccess() {
		return pExprEq;
	}
	
	public ParserRule getExprEqRule() {
		return getExprEqAccess().getRule();
	}

	//VAR:
	//	bv=BASEVAR cf=CONF;
	public VARElements getVARAccess() {
		return pVAR;
	}
	
	public ParserRule getVARRule() {
		return getVARAccess().getRule();
	}

	//terminal BASEVAR:
	//	"A".."Z" ("0".."9" | "a".."z" | "A".."Z")*;
	public TerminalRule getBASEVARRule() {
		return tBASEVAR;
	} 

	//SYMB:
	//	bs=BASESYMB cf=CONF;
	public SYMBElements getSYMBAccess() {
		return pSYMB;
	}
	
	public ParserRule getSYMBRule() {
		return getSYMBAccess().getRule();
	}

	//terminal BASESYMB:
	//	"a".."z" ("0".."9" | "a".."z" | "A".."Z")*;
	public TerminalRule getBASESYMBRule() {
		return tBASESYMB;
	} 

	//terminal CONF:
	//	(("-" | "+" | "." | "/" | "_" | "&" | "->") ("0".."9" | "a".."z" | "A".."Z")+)* ("?" | "!")?;
	public TerminalRule getCONFRule() {
		return tCONF;
	} 

	//LC:
	//	LCs?;
	public LCElements getLCAccess() {
		return pLC;
	}
	
	public ParserRule getLCRule() {
		return getLCAccess().getRule();
	}

	//LCs:
	//	SP | CR | TAB | LF;
	public LCsElements getLCsAccess() {
		return pLCs;
	}
	
	public ParserRule getLCsRule() {
		return getLCsAccess().getRule();
	}

	//terminal SP:
	//	" ";
	public TerminalRule getSPRule() {
		return tSP;
	} 

	//terminal CR:
	//	"\n";
	public TerminalRule getCRRule() {
		return tCR;
	} 

	//terminal TAB:
	//	"\t";
	public TerminalRule getTABRule() {
		return tTAB;
	} 

	//terminal LF:
	//	"\r";
	public TerminalRule getLFRule() {
		return tLF;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
