/*
 * generated by Xtext
 */
grammar InternalLangage_while;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.Langage_whileGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private Langage_whileGrammarAccess grammarAccess;
 	
    public InternalLangage_whileParser(TokenStream input, Langage_whileGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected Langage_whileGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getProgFunctionParserRuleCall_0()); 
	    }
		lv_prog_0_0=ruleFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"prog",
        		lv_prog_0_0, 
        		"Function");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='function' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionAccess().getFunctionKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getNLCsParserRuleCall_1_0()); 
	    }
		lv_n_1_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"n",
        		lv_n_1_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_nom_2_0=RULE_SYM
		{
			newLeafNode(lv_nom_2_0, grammarAccess.getFunctionAccess().getNomSYMTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"nom",
        		lv_nom_2_0, 
        		"SYM");
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getTLCsParserRuleCall_4_0()); 
	    }
		lv_t_4_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"t",
        		lv_t_4_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getDDefParserRuleCall_5_0()); 
	    }
		lv_d_5_0=ruleDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"d",
        		lv_d_5_0, 
        		"Def");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDef
entryRuleDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefRule()); }
	 iv_ruleDef=ruleDef 
	 { $current=$iv_ruleDef.current; } 
	 EOF 
;

// Rule Def
ruleDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='read' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefAccess().getReadKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefAccess().getLLCsParserRuleCall_1_0()); 
	    }
		lv_l_1_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefRule());
	        }
       		set(
       			$current, 
       			"l",
        		lv_l_1_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDefAccess().getInInputParserRuleCall_2_0()); 
	    }
		lv_in_2_0=ruleInput		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefRule());
	        }
       		set(
       			$current, 
       			"in",
        		lv_in_2_0, 
        		"Input");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDefAccess().getZLCsParserRuleCall_3_0()); 
	    }
		lv_z_3_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefRule());
	        }
       		set(
       			$current, 
       			"z",
        		lv_z_3_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='%' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDefAccess().getPercentSignKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefAccess().getVCommandsParserRuleCall_5_0()); 
	    }
		lv_v_5_0=ruleCommands		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefRule());
	        }
       		set(
       			$current, 
       			"v",
        		lv_v_5_0, 
        		"Commands");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDefAccess().getSLCsParserRuleCall_6_0()); 
	    }
		lv_s_6_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefRule());
	        }
       		set(
       			$current, 
       			"s",
        		lv_s_6_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='%' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDefAccess().getPercentSignKeyword_7());
    }
	otherlv_8='write' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDefAccess().getWriteKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefAccess().getULCsParserRuleCall_9_0()); 
	    }
		lv_u_9_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefRule());
	        }
       		set(
       			$current, 
       			"u",
        		lv_u_9_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDefAccess().getOOutputParserRuleCall_10_0()); 
	    }
		lv_o_10_0=ruleOutput		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefRule());
	        }
       		set(
       			$current, 
       			"o",
        		lv_o_10_0, 
        		"Output");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInput
entryRuleInput returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputRule()); }
	 iv_ruleInput=ruleInput 
	 { $current=$iv_ruleInput.current; } 
	 EOF 
;

// Rule Input
ruleInput returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_v_0_0=RULE_VAR
		{
			newLeafNode(lv_v_0_0, grammarAccess.getInputAccess().getVVARTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInputRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"v",
        		lv_v_0_0, 
        		"VAR");
	    }

)
)	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInputAccess().getCommaKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInputAccess().getZLCsParserRuleCall_0_2_0()); 
	    }
		lv_z_2_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInputRule());
	        }
       		set(
       			$current, 
       			"z",
        		lv_z_2_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInputAccess().getInInputParserRuleCall_0_3_0()); 
	    }
		lv_in_3_0=ruleInput		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInputRule());
	        }
       		set(
       			$current, 
       			"in",
        		lv_in_3_0, 
        		"Input");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		lv_y_4_0=RULE_VAR
		{
			newLeafNode(lv_y_4_0, grammarAccess.getInputAccess().getYVARTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInputRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"y",
        		lv_y_4_0, 
        		"VAR");
	    }

)
))
;





// Entry rule entryRuleOutput
entryRuleOutput returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutputRule()); }
	 iv_ruleOutput=ruleOutput 
	 { $current=$iv_ruleOutput.current; } 
	 EOF 
;

// Rule Output
ruleOutput returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_n_0_0=RULE_VAR
		{
			newLeafNode(lv_n_0_0, grammarAccess.getOutputAccess().getNVARTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOutputRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"n",
        		lv_n_0_0, 
        		"VAR");
	    }

)
)	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOutputAccess().getCommaKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOutputAccess().getQLCsParserRuleCall_0_2_0()); 
	    }
		lv_q_2_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutputRule());
	        }
       		set(
       			$current, 
       			"q",
        		lv_q_2_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOutputAccess().getOOutputParserRuleCall_0_3_0()); 
	    }
		lv_o_3_0=ruleOutput		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutputRule());
	        }
       		set(
       			$current, 
       			"o",
        		lv_o_3_0, 
        		"Output");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		lv_s_4_0=RULE_VAR
		{
			newLeafNode(lv_s_4_0, grammarAccess.getOutputAccess().getSVARTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOutputRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"s",
        		lv_s_4_0, 
        		"VAR");
	    }

)
))
;





// Entry rule entryRuleCommands
entryRuleCommands returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommandsRule()); }
	 iv_ruleCommands=ruleCommands 
	 { $current=$iv_ruleCommands.current; } 
	 EOF 
;

// Rule Commands
ruleCommands returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCommandsAccess().getACommandParserRuleCall_0_0()); 
	    }
		lv_a_0_0=ruleCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandsRule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_0_0, 
        		"Command");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCommandsAccess().getSemicolonKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandsAccess().getLLCsParserRuleCall_1_1_0()); 
	    }
		lv_l_2_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandsRule());
	        }
       		set(
       			$current, 
       			"l",
        		lv_l_2_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandsAccess().getSCommandsParserRuleCall_1_2_0()); 
	    }
		lv_s_3_0=ruleCommands		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandsRule());
	        }
       		set(
       			$current, 
       			"s",
        		lv_s_3_0, 
        		"Commands");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	 iv_ruleCommand=ruleCommand 
	 { $current=$iv_ruleCommand.current; } 
	 EOF 
;

// Rule Command
ruleCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCommandAccess().getNopNopParserRuleCall_0_0()); 
	    }
		lv_nop_0_0=ruleNop		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandRule());
	        }
       		set(
       			$current, 
       			"nop",
        		lv_nop_0_0, 
        		"Nop");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandAccess().getAffectAssignParserRuleCall_1_0()); 
	    }
		lv_affect_1_0=ruleAssign		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandRule());
	        }
       		set(
       			$current, 
       			"affect",
        		lv_affect_1_0, 
        		"Assign");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandAccess().getWhWhileParserRuleCall_2_0()); 
	    }
		lv_wh_2_0=ruleWhile		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandRule());
	        }
       		set(
       			$current, 
       			"wh",
        		lv_wh_2_0, 
        		"While");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandAccess().getForrForParserRuleCall_3_0()); 
	    }
		lv_forr_3_0=ruleFor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandRule());
	        }
       		set(
       			$current, 
       			"forr",
        		lv_forr_3_0, 
        		"For");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandAccess().getForeForeachParserRuleCall_4_0()); 
	    }
		lv_fore_4_0=ruleForeach		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandRule());
	        }
       		set(
       			$current, 
       			"fore",
        		lv_fore_4_0, 
        		"Foreach");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandAccess().getIffIfParserRuleCall_5_0()); 
	    }
		lv_iff_5_0=ruleIf		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandRule());
	        }
       		set(
       			$current, 
       			"iff",
        		lv_iff_5_0, 
        		"If");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNop
entryRuleNop returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNopRule()); } 
	 iv_ruleNop=ruleNop 
	 { $current=$iv_ruleNop.current.getText(); }  
	 EOF 
;

// Rule Nop
ruleNop returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='nop' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNopAccess().getNopKeyword()); 
    }

    ;





// Entry rule entryRuleAssign
entryRuleAssign returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignRule()); }
	 iv_ruleAssign=ruleAssign 
	 { $current=$iv_ruleAssign.current; } 
	 EOF 
;

// Rule Assign
ruleAssign returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignAccess().getEVarsParserRuleCall_0_0()); 
	    }
		lv_e_0_0=ruleVars		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignRule());
	        }
       		set(
       			$current, 
       			"e",
        		lv_e_0_0, 
        		"Vars");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignAccess().getLLCsParserRuleCall_1_0()); 
	    }
		lv_l_1_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignRule());
	        }
       		set(
       			$current, 
       			"l",
        		lv_l_1_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAssignAccess().getColonEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignAccess().getCLCsParserRuleCall_3_0()); 
	    }
		lv_c_3_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignRule());
	        }
       		set(
       			$current, 
       			"c",
        		lv_c_3_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignAccess().getNEXPRSParserRuleCall_4_0()); 
	    }
		lv_n_4_0=ruleEXPRS		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignRule());
	        }
       		set(
       			$current, 
       			"n",
        		lv_n_4_0, 
        		"EXPRS");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleWhile
entryRuleWhile returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhileRule()); }
	 iv_ruleWhile=ruleWhile 
	 { $current=$iv_ruleWhile.current; } 
	 EOF 
;

// Rule While
ruleWhile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhileAccess().getWhileKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileAccess().getLlLCsParserRuleCall_1_0()); 
	    }
		lv_ll_1_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileRule());
	        }
       		set(
       			$current, 
       			"ll",
        		lv_ll_1_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileAccess().getEeEXPRParserRuleCall_2_0()); 
	    }
		lv_ee_2_0=ruleEXPR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileRule());
	        }
       		set(
       			$current, 
       			"ee",
        		lv_ee_2_0, 
        		"EXPR");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileAccess().getCcLCsParserRuleCall_3_0()); 
	    }
		lv_cc_3_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileRule());
	        }
       		set(
       			$current, 
       			"cc",
        		lv_cc_3_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='do' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getWhileAccess().getDoKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileAccess().getZLCsParserRuleCall_5_0()); 
	    }
		lv_z_5_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileRule());
	        }
       		set(
       			$current, 
       			"z",
        		lv_z_5_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileAccess().getKCommandsParserRuleCall_6_0()); 
	    }
		lv_k_6_0=ruleCommands		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileRule());
	        }
       		set(
       			$current, 
       			"k",
        		lv_k_6_0, 
        		"Commands");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileAccess().getLcLCsParserRuleCall_7_0()); 
	    }
		lv_lc_7_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileRule());
	        }
       		set(
       			$current, 
       			"lc",
        		lv_lc_7_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='od' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getWhileAccess().getOdKeyword_8());
    }
)
;





// Entry rule entryRuleFor
entryRuleFor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForRule()); }
	 iv_ruleFor=ruleFor 
	 { $current=$iv_ruleFor.current; } 
	 EOF 
;

// Rule For
ruleFor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForAccess().getForKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForAccess().getCcLCsParserRuleCall_1_0()); 
	    }
		lv_cc_1_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForRule());
	        }
       		set(
       			$current, 
       			"cc",
        		lv_cc_1_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForAccess().getHhEXPRParserRuleCall_2_0()); 
	    }
		lv_hh_2_0=ruleEXPR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForRule());
	        }
       		set(
       			$current, 
       			"hh",
        		lv_hh_2_0, 
        		"EXPR");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForAccess().getTtLCsParserRuleCall_3_0()); 
	    }
		lv_tt_3_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForRule());
	        }
       		set(
       			$current, 
       			"tt",
        		lv_tt_3_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='do' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getForAccess().getDoKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForAccess().getVvLCsParserRuleCall_5_0()); 
	    }
		lv_vv_5_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForRule());
	        }
       		set(
       			$current, 
       			"vv",
        		lv_vv_5_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForAccess().getC1CommandsParserRuleCall_6_0()); 
	    }
		lv_c1_6_0=ruleCommands		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForRule());
	        }
       		set(
       			$current, 
       			"c1",
        		lv_c1_6_0, 
        		"Commands");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForAccess().getSsLCsParserRuleCall_7_0()); 
	    }
		lv_ss_7_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForRule());
	        }
       		set(
       			$current, 
       			"ss",
        		lv_ss_7_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='od' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getForAccess().getOdKeyword_8());
    }
)
;





// Entry rule entryRuleIf
entryRuleIf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfRule()); }
	 iv_ruleIf=ruleIf 
	 { $current=$iv_ruleIf.current; } 
	 EOF 
;

// Rule If
ruleIf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfAccess().getIfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAccess().getMmLCsParserRuleCall_1_0()); 
	    }
		lv_mm_1_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfRule());
	        }
       		set(
       			$current, 
       			"mm",
        		lv_mm_1_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAccess().getJjEXPRParserRuleCall_2_0()); 
	    }
		lv_jj_2_0=ruleEXPR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfRule());
	        }
       		set(
       			$current, 
       			"jj",
        		lv_jj_2_0, 
        		"EXPR");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAccess().getKkLCsParserRuleCall_3_0()); 
	    }
		lv_kk_3_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfRule());
	        }
       		set(
       			$current, 
       			"kk",
        		lv_kk_3_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='then' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfAccess().getThenKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAccess().getHgLCsParserRuleCall_5_0()); 
	    }
		lv_hg_5_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfRule());
	        }
       		set(
       			$current, 
       			"hg",
        		lv_hg_5_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAccess().getC2CommandsParserRuleCall_6_0()); 
	    }
		lv_c2_6_0=ruleCommands		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfRule());
	        }
       		set(
       			$current, 
       			"c2",
        		lv_c2_6_0, 
        		"Commands");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAccess().getGgLCsParserRuleCall_7_0()); 
	    }
		lv_gg_7_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfRule());
	        }
       		set(
       			$current, 
       			"gg",
        		lv_gg_7_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8='else' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getIfAccess().getElseKeyword_8_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAccess().getFfLCsParserRuleCall_8_1_0()); 
	    }
		lv_ff_9_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfRule());
	        }
       		set(
       			$current, 
       			"ff",
        		lv_ff_9_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAccess().getOCommandsParserRuleCall_8_2_0()); 
	    }
		lv_o_10_0=ruleCommands		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfRule());
	        }
       		set(
       			$current, 
       			"o",
        		lv_o_10_0, 
        		"Commands");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAccess().getDdLCsParserRuleCall_8_3_0()); 
	    }
		lv_dd_11_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfRule());
	        }
       		set(
       			$current, 
       			"dd",
        		lv_dd_11_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_12='fi' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getIfAccess().getFiKeyword_9());
    }
)
;





// Entry rule entryRuleForeach
entryRuleForeach returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForeachRule()); }
	 iv_ruleForeach=ruleForeach 
	 { $current=$iv_ruleForeach.current; } 
	 EOF 
;

// Rule Foreach
ruleForeach returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='foreach' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForeachAccess().getForeachKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForeachAccess().getSqLCsParserRuleCall_1_0()); 
	    }
		lv_sq_1_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeachRule());
	        }
       		set(
       			$current, 
       			"sq",
        		lv_sq_1_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForeachAccess().getWxEXPRParserRuleCall_2_0()); 
	    }
		lv_wx_2_0=ruleEXPR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeachRule());
	        }
       		set(
       			$current, 
       			"wx",
        		lv_wx_2_0, 
        		"EXPR");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForeachAccess().getLcLCsParserRuleCall_3_0()); 
	    }
		lv_lc_3_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeachRule());
	        }
       		set(
       			$current, 
       			"lc",
        		lv_lc_3_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='in' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getForeachAccess().getInKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForeachAccess().getLc2LCsParserRuleCall_5_0()); 
	    }
		lv_lc2_5_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeachRule());
	        }
       		set(
       			$current, 
       			"lc2",
        		lv_lc2_5_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForeachAccess().getE1EXPRParserRuleCall_6_0()); 
	    }
		lv_e1_6_0=ruleEXPR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeachRule());
	        }
       		set(
       			$current, 
       			"e1",
        		lv_e1_6_0, 
        		"EXPR");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForeachAccess().getLc3LCsParserRuleCall_7_0()); 
	    }
		lv_lc3_7_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeachRule());
	        }
       		set(
       			$current, 
       			"lc3",
        		lv_lc3_7_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='do' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getForeachAccess().getDoKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForeachAccess().getLc4LCsParserRuleCall_9_0()); 
	    }
		lv_lc4_9_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeachRule());
	        }
       		set(
       			$current, 
       			"lc4",
        		lv_lc4_9_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForeachAccess().getC3CommandsParserRuleCall_10_0()); 
	    }
		lv_c3_10_0=ruleCommands		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeachRule());
	        }
       		set(
       			$current, 
       			"c3",
        		lv_c3_10_0, 
        		"Commands");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForeachAccess().getLc5LCsParserRuleCall_11_0()); 
	    }
		lv_lc5_11_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeachRule());
	        }
       		set(
       			$current, 
       			"lc5",
        		lv_lc5_11_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_12='od' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getForeachAccess().getOdKeyword_12());
    }
)
;





// Entry rule entryRuleVars
entryRuleVars returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarsRule()); }
	 iv_ruleVars=ruleVars 
	 { $current=$iv_ruleVars.current; } 
	 EOF 
;

// Rule Vars
ruleVars returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_a_0_0=RULE_VAR
		{
			newLeafNode(lv_a_0_0, grammarAccess.getVarsAccess().getAVARTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"a",
        		lv_a_0_0, 
        		"VAR");
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVarsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVarsAccess().getLLCsParserRuleCall_1_1_0()); 
	    }
		lv_l_2_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarsRule());
	        }
       		set(
       			$current, 
       			"l",
        		lv_l_2_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVarsAccess().getUVarsParserRuleCall_1_2_0()); 
	    }
		lv_u_3_0=ruleVars		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarsRule());
	        }
       		set(
       			$current, 
       			"u",
        		lv_u_3_0, 
        		"Vars");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleEXPRS
entryRuleEXPRS returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEXPRSRule()); }
	 iv_ruleEXPRS=ruleEXPRS 
	 { $current=$iv_ruleEXPRS.current; } 
	 EOF 
;

// Rule EXPRS
ruleEXPRS returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEXPRSAccess().getFEXPRParserRuleCall_0_0()); 
	    }
		lv_f_0_0=ruleEXPR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEXPRSRule());
	        }
       		set(
       			$current, 
       			"f",
        		lv_f_0_0, 
        		"EXPR");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEXPRSAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEXPRSAccess().getLLCsParserRuleCall_1_1_0()); 
	    }
		lv_l_2_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEXPRSRule());
	        }
       		set(
       			$current, 
       			"l",
        		lv_l_2_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEXPRSAccess().getE2EXPRSParserRuleCall_1_2_0()); 
	    }
		lv_e2_3_0=ruleEXPRS		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEXPRSRule());
	        }
       		set(
       			$current, 
       			"e2",
        		lv_e2_3_0, 
        		"EXPRS");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleEXPR
entryRuleEXPR returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEXPRRule()); }
	 iv_ruleEXPR=ruleEXPR 
	 { $current=$iv_ruleEXPR.current; } 
	 EOF 
;

// Rule EXPR
ruleEXPR returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEXPRAccess().getE1EXPRSIMPLEParserRuleCall_0_0()); 
	    }
		lv_e1_0_0=ruleEXPRSIMPLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEXPRRule());
	        }
       		set(
       			$current, 
       			"e1",
        		lv_e1_0_0, 
        		"EXPRSIMPLE");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getEXPRAccess().getExEXPRANDParserRuleCall_1_0()); 
	    }
		lv_ex_1_0=ruleEXPRAND		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEXPRRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_1_0, 
        		"EXPRAND");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEXPRSIMPLE
entryRuleEXPRSIMPLE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEXPRSIMPLERule()); }
	 iv_ruleEXPRSIMPLE=ruleEXPRSIMPLE 
	 { $current=$iv_ruleEXPRSIMPLE.current; } 
	 EOF 
;

// Rule EXPRSIMPLE
ruleEXPRSIMPLE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_nil_0_0=	'nil' 
    {
        newLeafNode(lv_nil_0_0, grammarAccess.getEXPRSIMPLEAccess().getNilNilKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEXPRSIMPLERule());
	        }
       		setWithLastConsumed($current, "nil", lv_nil_0_0, "nil");
	    }

)
)
    |(
(
		lv_v_1_0=RULE_VAR
		{
			newLeafNode(lv_v_1_0, grammarAccess.getEXPRSIMPLEAccess().getVVARTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEXPRSIMPLERule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"v",
        		lv_v_1_0, 
        		"VAR");
	    }

)
)
    |(
(
		lv_sym_2_0=RULE_SYM
		{
			newLeafNode(lv_sym_2_0, grammarAccess.getEXPRSIMPLEAccess().getSymSYMTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEXPRSIMPLERule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sym",
        		lv_sym_2_0, 
        		"SYM");
	    }

)
)
    |(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEXPRSIMPLEAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
(
		lv_mot_4_1=	'cons' 
    {
        newLeafNode(lv_mot_4_1, grammarAccess.getEXPRSIMPLEAccess().getMotConsKeyword_3_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEXPRSIMPLERule());
	        }
       		setWithLastConsumed($current, "mot", lv_mot_4_1, null);
	    }

    |		lv_mot_4_2=	'list' 
    {
        newLeafNode(lv_mot_4_2, grammarAccess.getEXPRSIMPLEAccess().getMotListKeyword_3_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEXPRSIMPLERule());
	        }
       		setWithLastConsumed($current, "mot", lv_mot_4_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEXPRSIMPLEAccess().getLexLEXPRParserRuleCall_3_2_0()); 
	    }
		lv_lex_5_0=ruleLEXPR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEXPRSIMPLERule());
	        }
       		set(
       			$current, 
       			"lex",
        		lv_lex_5_0, 
        		"LEXPR");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEXPRSIMPLEAccess().getRightParenthesisKeyword_3_3());
    }
)
    |(	otherlv_7='(' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getEXPRSIMPLEAccess().getLeftParenthesisKeyword_4_0());
    }
(
(
(
		lv_mot_8_1=	'hd' 
    {
        newLeafNode(lv_mot_8_1, grammarAccess.getEXPRSIMPLEAccess().getMotHdKeyword_4_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEXPRSIMPLERule());
	        }
       		setWithLastConsumed($current, "mot", lv_mot_8_1, null);
	    }

    |		lv_mot_8_2=	'tl' 
    {
        newLeafNode(lv_mot_8_2, grammarAccess.getEXPRSIMPLEAccess().getMotTlKeyword_4_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEXPRSIMPLERule());
	        }
       		setWithLastConsumed($current, "mot", lv_mot_8_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEXPRSIMPLEAccess().getLLCsParserRuleCall_4_2_0()); 
	    }
		lv_l_9_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEXPRSIMPLERule());
	        }
       		set(
       			$current, 
       			"l",
        		lv_l_9_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEXPRSIMPLEAccess().getExEXPRParserRuleCall_4_3_0()); 
	    }
		lv_ex_10_0=ruleEXPR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEXPRSIMPLERule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_10_0, 
        		"EXPR");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getEXPRSIMPLEAccess().getRightParenthesisKeyword_4_4());
    }
)
    |(	otherlv_12='(' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getEXPRSIMPLEAccess().getLeftParenthesisKeyword_5_0());
    }
(
(
		lv_sym_13_0=RULE_SYM
		{
			newLeafNode(lv_sym_13_0, grammarAccess.getEXPRSIMPLEAccess().getSymSYMTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEXPRSIMPLERule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sym",
        		lv_sym_13_0, 
        		"SYM");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEXPRSIMPLEAccess().getLexLEXPRParserRuleCall_5_2_0()); 
	    }
		lv_lex_14_0=ruleLEXPR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEXPRSIMPLERule());
	        }
       		set(
       			$current, 
       			"lex",
        		lv_lex_14_0, 
        		"LEXPR");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_15=')' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getEXPRSIMPLEAccess().getRightParenthesisKeyword_5_3());
    }
))
;





// Entry rule entryRuleLEXPR
entryRuleLEXPR returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLEXPRRule()); }
	 iv_ruleLEXPR=ruleLEXPR 
	 { $current=$iv_ruleLEXPR.current; } 
	 EOF 
;

// Rule LEXPR
ruleLEXPR returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLEXPRAccess().getFLCsParserRuleCall_0_0()); 
	    }
		lv_f_0_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLEXPRRule());
	        }
       		set(
       			$current, 
       			"f",
        		lv_f_0_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLEXPRAccess().getNEXPRParserRuleCall_1_0()); 
	    }
		lv_n_1_0=ruleEXPR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLEXPRRule());
	        }
       		set(
       			$current, 
       			"n",
        		lv_n_1_0, 
        		"EXPR");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLEXPRAccess().getTLEXPRParserRuleCall_2_0()); 
	    }
		lv_t_2_0=ruleLEXPR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLEXPRRule());
	        }
       		set(
       			$current, 
       			"t",
        		lv_t_2_0, 
        		"LEXPR");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleEXPRAND
entryRuleEXPRAND returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEXPRANDRule()); }
	 iv_ruleEXPRAND=ruleEXPRAND 
	 { $current=$iv_ruleEXPRAND.current; } 
	 EOF 
;

// Rule EXPRAND
ruleEXPRAND returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEXPRANDAccess().getFEXPRORParserRuleCall_0_0()); 
	    }
		lv_f_0_0=ruleEXPROR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEXPRANDRule());
	        }
       		set(
       			$current, 
       			"f",
        		lv_f_0_0, 
        		"EXPROR");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getEXPRANDAccess().getLc1LCsParserRuleCall_1_0_0()); 
	    }
		lv_lc1_1_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEXPRANDRule());
	        }
       		set(
       			$current, 
       			"lc1",
        		lv_lc1_1_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='and' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEXPRANDAccess().getAndKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEXPRANDAccess().getLc2LCsParserRuleCall_1_2_0()); 
	    }
		lv_lc2_3_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEXPRANDRule());
	        }
       		set(
       			$current, 
       			"lc2",
        		lv_lc2_3_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEXPRANDAccess().getEeEXPRANDParserRuleCall_1_3_0()); 
	    }
		lv_ee_4_0=ruleEXPRAND		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEXPRANDRule());
	        }
       		set(
       			$current, 
       			"ee",
        		lv_ee_4_0, 
        		"EXPRAND");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleEXPROR
entryRuleEXPROR returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEXPRORRule()); }
	 iv_ruleEXPROR=ruleEXPROR 
	 { $current=$iv_ruleEXPROR.current; } 
	 EOF 
;

// Rule EXPROR
ruleEXPROR returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEXPRORAccess().getE1EXPRNOTParserRuleCall_0_0()); 
	    }
		lv_e1_0_0=ruleEXPRNOT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEXPRORRule());
	        }
       		set(
       			$current, 
       			"e1",
        		lv_e1_0_0, 
        		"EXPRNOT");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getEXPRORAccess().getLc1LCsParserRuleCall_1_0_0()); 
	    }
		lv_lc1_1_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEXPRORRule());
	        }
       		set(
       			$current, 
       			"lc1",
        		lv_lc1_1_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='or' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEXPRORAccess().getOrKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEXPRORAccess().getLc2LCsParserRuleCall_1_2_0()); 
	    }
		lv_lc2_3_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEXPRORRule());
	        }
       		set(
       			$current, 
       			"lc2",
        		lv_lc2_3_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEXPRORAccess().getE2EXPRORParserRuleCall_1_3_0()); 
	    }
		lv_e2_4_0=ruleEXPROR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEXPRORRule());
	        }
       		set(
       			$current, 
       			"e2",
        		lv_e2_4_0, 
        		"EXPROR");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleEXPRNOT
entryRuleEXPRNOT returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEXPRNOTRule()); }
	 iv_ruleEXPRNOT=ruleEXPRNOT 
	 { $current=$iv_ruleEXPRNOT.current; } 
	 EOF 
;

// Rule EXPRNOT
ruleEXPRNOT returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='not' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEXPRNOTAccess().getNotKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEXPRNOTAccess().getLc1LCsParserRuleCall_0_1_0()); 
	    }
		lv_lc1_1_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEXPRNOTRule());
	        }
       		set(
       			$current, 
       			"lc1",
        		lv_lc1_1_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getEXPRNOTAccess().getE1EXPREQParserRuleCall_1_0()); 
	    }
		lv_e1_2_0=ruleEXPREQ		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEXPRNOTRule());
	        }
       		set(
       			$current, 
       			"e1",
        		lv_e1_2_0, 
        		"EXPREQ");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEXPREQ
entryRuleEXPREQ returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEXPREQRule()); }
	 iv_ruleEXPREQ=ruleEXPREQ 
	 { $current=$iv_ruleEXPREQ.current; } 
	 EOF 
;

// Rule EXPREQ
ruleEXPREQ returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getEXPREQAccess().getE1EXPRSIMPLEParserRuleCall_0_0_0()); 
	    }
		lv_e1_0_0=ruleEXPRSIMPLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEXPREQRule());
	        }
       		set(
       			$current, 
       			"e1",
        		lv_e1_0_0, 
        		"EXPRSIMPLE");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEXPREQAccess().getCccLCsParserRuleCall_0_1_0()); 
	    }
		lv_ccc_1_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEXPREQRule());
	        }
       		set(
       			$current, 
       			"ccc",
        		lv_ccc_1_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=?' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEXPREQAccess().getEqualsSignQuestionMarkKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEXPREQAccess().getLc2LCsParserRuleCall_0_3_0()); 
	    }
		lv_lc2_3_0=ruleLCs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEXPREQRule());
	        }
       		set(
       			$current, 
       			"lc2",
        		lv_lc2_3_0, 
        		"LCs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEXPREQAccess().getWEXPRSIMPLEParserRuleCall_0_4_0()); 
	    }
		lv_w_4_0=ruleEXPRSIMPLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEXPREQRule());
	        }
       		set(
       			$current, 
       			"w",
        		lv_w_4_0, 
        		"EXPRSIMPLE");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEXPREQAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEXPREQAccess().getExEXPRParserRuleCall_1_1_0()); 
	    }
		lv_ex_6_0=ruleEXPR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEXPREQRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_6_0, 
        		"EXPR");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getEXPREQAccess().getRightParenthesisKeyword_1_2());
    }
))
;











// Entry rule entryRuleLCs
entryRuleLCs returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLCsRule()); }
	 iv_ruleLCs=ruleLCs 
	 { $current=$iv_ruleLCs.current; } 
	 EOF 
;

// Rule LCs
ruleLCs returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getLCsAccess().getLLCParserRuleCall_0()); 
	    }
		lv_l_0_0=ruleLC		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLCsRule());
	        }
       		set(
       			$current, 
       			"l",
        		lv_l_0_0, 
        		"LC");
	        afterParserOrEnumRuleCall();
	    }

)
)?
;





// Entry rule entryRuleLC
entryRuleLC returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLCRule()); }
	 iv_ruleLC=ruleLC 
	 { $current=$iv_ruleLC.current; } 
	 EOF 
;

// Rule LC
ruleLC returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_a_0_0=RULE_SP
		{
			newLeafNode(lv_a_0_0, grammarAccess.getLCAccess().getASPTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLCRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"a",
        		lv_a_0_0, 
        		"SP");
	    }

)
)
    |(
(
		lv_z_1_0=RULE_CR
		{
			newLeafNode(lv_z_1_0, grammarAccess.getLCAccess().getZCRTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLCRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"z",
        		lv_z_1_0, 
        		"CR");
	    }

)
)
    |(
(
		lv_e_2_0=RULE_TAB
		{
			newLeafNode(lv_e_2_0, grammarAccess.getLCAccess().getETABTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLCRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"e",
        		lv_e_2_0, 
        		"TAB");
	    }

)
)
    |(
(
		lv_r_3_0=RULE_LF
		{
			newLeafNode(lv_r_3_0, grammarAccess.getLCAccess().getRLFTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLCRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"r",
        		lv_r_3_0, 
        		"LF");
	    }

)
))
;





RULE_VAR : 'A'..'Z' ('a'..'z'|'A'..'Z'|'0'..'9')* RULE_CONF;

RULE_SYM : 'a'..'z' ('a'..'z'|'A'..'Z'|'0'..'9')* RULE_CONF;

RULE_CONF : (('-'|'+'|'.'|'/'|'_'|'&'|'->') ('a'..'z'|'A'..'Z'|'0'..'9')+)* ('?'|'!');

RULE_SP : ' ';

RULE_CR : '\n';

RULE_TAB : '\t';

RULE_LF : '\r';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


