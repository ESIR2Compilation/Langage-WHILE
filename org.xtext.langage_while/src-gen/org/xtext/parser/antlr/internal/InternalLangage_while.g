/*
 * generated by Xtext
 */
grammar InternalLangage_while;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.Langage_whileGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private Langage_whileGrammarAccess grammarAccess;
 	
    public InternalLangage_whileParser(TokenStream input, Langage_whileGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected Langage_whileGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getProgFunctionParserRuleCall_0_0()); 
	    }
		lv_prog_0_0=ruleFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"prog",
        		lv_prog_0_0, 
        		"Function");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getModelAccess().getLCParserRuleCall_1()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
)?)*
;





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='function' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionAccess().getFunctionKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFunctionAccess().getLCParserRuleCall_1()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getNameSYMBParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleSYMB		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"SYMB");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionAccess().getColonKeyword_3());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFunctionAccess().getLCParserRuleCall_4()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getDefDefinitionParserRuleCall_5_0()); 
	    }
		lv_def_5_0=ruleDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"def",
        		lv_def_5_0, 
        		"Definition");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDefinition
entryRuleDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefinitionRule()); }
	 iv_ruleDefinition=ruleDefinition 
	 { $current=$iv_ruleDefinition.current; } 
	 EOF 
;

// Rule Definition
ruleDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='read' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefinitionAccess().getReadKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDefinitionAccess().getLCParserRuleCall_1()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionAccess().getInInputParserRuleCall_2_0()); 
	    }
		lv_in_2_0=ruleInput		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionRule());
	        }
       		set(
       			$current, 
       			"in",
        		lv_in_2_0, 
        		"Input");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDefinitionAccess().getLCParserRuleCall_3()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_4='%' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDefinitionAccess().getPercentSignKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionAccess().getComCommandsParserRuleCall_5_0()); 
	    }
		lv_com_5_0=ruleCommands		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionRule());
	        }
       		set(
       			$current, 
       			"com",
        		lv_com_5_0, 
        		"Commands");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDefinitionAccess().getLCParserRuleCall_6()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_7='%' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDefinitionAccess().getPercentSignKeyword_7());
    }
	otherlv_8='write' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDefinitionAccess().getWriteKeyword_8());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDefinitionAccess().getLCParserRuleCall_9()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionAccess().getOutOutputParserRuleCall_10_0()); 
	    }
		lv_out_10_0=ruleOutput		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionRule());
	        }
       		set(
       			$current, 
       			"out",
        		lv_out_10_0, 
        		"Output");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInput
entryRuleInput returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputRule()); }
	 iv_ruleInput=ruleInput 
	 { $current=$iv_ruleInput.current; } 
	 EOF 
;

// Rule Input
ruleInput returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInputAccess().getVVARParserRuleCall_0_0()); 
	    }
		lv_v_0_0=ruleVAR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInputRule());
	        }
       		add(
       			$current, 
       			"v",
        		lv_v_0_0, 
        		"VAR");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInputAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInputAccess().getVVARParserRuleCall_1_1_0()); 
	    }
		lv_v_2_0=ruleVAR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInputRule());
	        }
       		add(
       			$current, 
       			"v",
        		lv_v_2_0, 
        		"VAR");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOutput
entryRuleOutput returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutputRule()); }
	 iv_ruleOutput=ruleOutput 
	 { $current=$iv_ruleOutput.current; } 
	 EOF 
;

// Rule Output
ruleOutput returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOutputAccess().getVVARParserRuleCall_0_0()); 
	    }
		lv_v_0_0=ruleVAR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutputRule());
	        }
       		add(
       			$current, 
       			"v",
        		lv_v_0_0, 
        		"VAR");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOutputAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOutputAccess().getVVARParserRuleCall_1_1_0()); 
	    }
		lv_v_2_0=ruleVAR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutputRule());
	        }
       		add(
       			$current, 
       			"v",
        		lv_v_2_0, 
        		"VAR");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleCommands
entryRuleCommands returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommandsRule()); }
	 iv_ruleCommands=ruleCommands 
	 { $current=$iv_ruleCommands.current; } 
	 EOF 
;

// Rule Commands
ruleCommands returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCommandsAccess().getCCommandParserRuleCall_0_0()); 
	    }
		lv_c_0_0=ruleCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandsRule());
	        }
       		add(
       			$current, 
       			"c",
        		lv_c_0_0, 
        		"Command");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCommandsAccess().getSemicolonKeyword_1_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandsAccess().getLCParserRuleCall_1_1()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandsAccess().getCCommandParserRuleCall_1_2_0()); 
	    }
		lv_c_3_0=ruleCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandsRule());
	        }
       		add(
       			$current, 
       			"c",
        		lv_c_3_0, 
        		"Command");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	 iv_ruleCommand=ruleCommand 
	 { $current=$iv_ruleCommand.current; } 
	 EOF 
;

// Rule Command
ruleCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_nop_0_0=	'nop' 
    {
        newLeafNode(lv_nop_0_0, grammarAccess.getCommandAccess().getNopNopKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCommandRule());
	        }
       		setWithLastConsumed($current, "nop", lv_nop_0_0, "nop");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandAccess().getAssignAssignParserRuleCall_1_0()); 
	    }
		lv_assign_1_0=ruleAssign		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandRule());
	        }
       		set(
       			$current, 
       			"assign",
        		lv_assign_1_0, 
        		"Assign");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandAccess().getWhWhileParserRuleCall_2_0()); 
	    }
		lv_wh_2_0=ruleWhile		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandRule());
	        }
       		set(
       			$current, 
       			"wh",
        		lv_wh_2_0, 
        		"While");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandAccess().getForForParserRuleCall_3_0()); 
	    }
		lv_for_3_0=ruleFor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandRule());
	        }
       		set(
       			$current, 
       			"for",
        		lv_for_3_0, 
        		"For");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandAccess().getIfIfParserRuleCall_4_0()); 
	    }
		lv_if_4_0=ruleIf		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandRule());
	        }
       		set(
       			$current, 
       			"if",
        		lv_if_4_0, 
        		"If");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandAccess().getForeForeachParserRuleCall_5_0()); 
	    }
		lv_fore_5_0=ruleForeach		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandRule());
	        }
       		set(
       			$current, 
       			"fore",
        		lv_fore_5_0, 
        		"Foreach");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandAccess().getIfcIfconfortParserRuleCall_6_0()); 
	    }
		lv_ifc_6_0=ruleIfconfort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandRule());
	        }
       		set(
       			$current, 
       			"ifc",
        		lv_ifc_6_0, 
        		"Ifconfort");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAssign
entryRuleAssign returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignRule()); }
	 iv_ruleAssign=ruleAssign 
	 { $current=$iv_ruleAssign.current; } 
	 EOF 
;

// Rule Assign
ruleAssign returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignAccess().getVsVarsParserRuleCall_0_0()); 
	    }
		lv_vs_0_0=ruleVars		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignRule());
	        }
       		set(
       			$current, 
       			"vs",
        		lv_vs_0_0, 
        		"Vars");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAssignAccess().getLCParserRuleCall_1()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=':=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAssignAccess().getColonEqualsSignKeyword_2());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAssignAccess().getLCParserRuleCall_3()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignAccess().getExExprsParserRuleCall_4_0()); 
	    }
		lv_ex_4_0=ruleExprs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_4_0, 
        		"Exprs");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleWhile
entryRuleWhile returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhileRule()); }
	 iv_ruleWhile=ruleWhile 
	 { $current=$iv_ruleWhile.current; } 
	 EOF 
;

// Rule While
ruleWhile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhileAccess().getWhileKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getWhileAccess().getLCParserRuleCall_1()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileAccess().getExExprParserRuleCall_2_0()); 
	    }
		lv_ex_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getWhileAccess().getLCParserRuleCall_3()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_4='do' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getWhileAccess().getDoKeyword_4());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getWhileAccess().getLCParserRuleCall_5()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileAccess().getCCommandsParserRuleCall_6_0()); 
	    }
		lv_c_6_0=ruleCommands		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileRule());
	        }
       		set(
       			$current, 
       			"c",
        		lv_c_6_0, 
        		"Commands");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getWhileAccess().getLCParserRuleCall_7()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_8='od' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getWhileAccess().getOdKeyword_8());
    }
)
;





// Entry rule entryRuleFor
entryRuleFor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForRule()); }
	 iv_ruleFor=ruleFor 
	 { $current=$iv_ruleFor.current; } 
	 EOF 
;

// Rule For
ruleFor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForAccess().getForKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getForAccess().getLCParserRuleCall_1()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForAccess().getExExprParserRuleCall_2_0()); 
	    }
		lv_ex_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getForAccess().getLCParserRuleCall_3()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_4='do' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getForAccess().getDoKeyword_4());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getForAccess().getLCParserRuleCall_5()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForAccess().getCCommandsParserRuleCall_6_0()); 
	    }
		lv_c_6_0=ruleCommands		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForRule());
	        }
       		set(
       			$current, 
       			"c",
        		lv_c_6_0, 
        		"Commands");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getForAccess().getLCParserRuleCall_7()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_8='od' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getForAccess().getOdKeyword_8());
    }
)
;





// Entry rule entryRuleIf
entryRuleIf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfRule()); }
	 iv_ruleIf=ruleIf 
	 { $current=$iv_ruleIf.current; } 
	 EOF 
;

// Rule If
ruleIf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfAccess().getIfKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIfAccess().getLCParserRuleCall_1()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAccess().getExExprParserRuleCall_2_0()); 
	    }
		lv_ex_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIfAccess().getLCParserRuleCall_3()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_4='then' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfAccess().getThenKeyword_4());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIfAccess().getLCParserRuleCall_5()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAccess().getCtCommandsParserRuleCall_6_0()); 
	    }
		lv_ct_6_0=ruleCommands		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfRule());
	        }
       		set(
       			$current, 
       			"ct",
        		lv_ct_6_0, 
        		"Commands");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIfAccess().getLCParserRuleCall_7()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_8='else' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getIfAccess().getElseKeyword_8());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIfAccess().getLCParserRuleCall_9()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAccess().getCeCommandsParserRuleCall_10_0()); 
	    }
		lv_ce_10_0=ruleCommands		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfRule());
	        }
       		set(
       			$current, 
       			"ce",
        		lv_ce_10_0, 
        		"Commands");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIfAccess().getLCParserRuleCall_11()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_12='fi' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getIfAccess().getFiKeyword_12());
    }
)
;





// Entry rule entryRuleForeach
entryRuleForeach returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForeachRule()); }
	 iv_ruleForeach=ruleForeach 
	 { $current=$iv_ruleForeach.current; } 
	 EOF 
;

// Rule Foreach
ruleForeach returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='foreach' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForeachAccess().getForeachKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getForeachAccess().getLCParserRuleCall_1()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForeachAccess().getEx1ExprParserRuleCall_2_0()); 
	    }
		lv_ex1_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeachRule());
	        }
       		set(
       			$current, 
       			"ex1",
        		lv_ex1_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getForeachAccess().getLCParserRuleCall_3()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_4='in' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getForeachAccess().getInKeyword_4());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getForeachAccess().getLCParserRuleCall_5()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForeachAccess().getEx2ExprParserRuleCall_6_0()); 
	    }
		lv_ex2_6_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeachRule());
	        }
       		set(
       			$current, 
       			"ex2",
        		lv_ex2_6_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getForeachAccess().getLCParserRuleCall_7()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_8='do' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getForeachAccess().getDoKeyword_8());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getForeachAccess().getLCParserRuleCall_9()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForeachAccess().getCCommandsParserRuleCall_10_0()); 
	    }
		lv_c_10_0=ruleCommands		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeachRule());
	        }
       		set(
       			$current, 
       			"c",
        		lv_c_10_0, 
        		"Commands");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getForeachAccess().getLCParserRuleCall_11()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_12='od' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getForeachAccess().getOdKeyword_12());
    }
)
;





// Entry rule entryRuleIfconfort
entryRuleIfconfort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfconfortRule()); }
	 iv_ruleIfconfort=ruleIfconfort 
	 { $current=$iv_ruleIfconfort.current; } 
	 EOF 
;

// Rule Ifconfort
ruleIfconfort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfconfortAccess().getIfKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIfconfortAccess().getLCParserRuleCall_1()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfconfortAccess().getExExprParserRuleCall_2_0()); 
	    }
		lv_ex_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfconfortRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIfconfortAccess().getLCParserRuleCall_3()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_4='then' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfconfortAccess().getThenKeyword_4());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIfconfortAccess().getLCParserRuleCall_5()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfconfortAccess().getCCommandsParserRuleCall_6_0()); 
	    }
		lv_c_6_0=ruleCommands		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfconfortRule());
	        }
       		set(
       			$current, 
       			"c",
        		lv_c_6_0, 
        		"Commands");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIfconfortAccess().getLCParserRuleCall_7()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_8='fi' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getIfconfortAccess().getFiKeyword_8());
    }
)
;





// Entry rule entryRuleVars
entryRuleVars returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarsRule()); }
	 iv_ruleVars=ruleVars 
	 { $current=$iv_ruleVars.current; } 
	 EOF 
;

// Rule Vars
ruleVars returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVarsAccess().getVsVARParserRuleCall_0_0()); 
	    }
		lv_vs_0_0=ruleVAR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarsRule());
	        }
       		add(
       			$current, 
       			"vs",
        		lv_vs_0_0, 
        		"VAR");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVarsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVarsAccess().getVsVARParserRuleCall_1_1_0()); 
	    }
		lv_vs_2_0=ruleVAR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarsRule());
	        }
       		add(
       			$current, 
       			"vs",
        		lv_vs_2_0, 
        		"VAR");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExprs
entryRuleExprs returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprsRule()); }
	 iv_ruleExprs=ruleExprs 
	 { $current=$iv_ruleExprs.current; } 
	 EOF 
;

// Rule Exprs
ruleExprs returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExprsAccess().getExExprParserRuleCall_0_0()); 
	    }
		lv_ex_0_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprsRule());
	        }
       		add(
       			$current, 
       			"ex",
        		lv_ex_0_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExprsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprsAccess().getExExprParserRuleCall_1_1_0()); 
	    }
		lv_ex_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprsRule());
	        }
       		add(
       			$current, 
       			"ex",
        		lv_ex_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	 iv_ruleExpr=ruleExpr 
	 { $current=$iv_ruleExpr.current; } 
	 EOF 
;

// Rule Expr
ruleExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExprAccess().getExsExprSimpleParserRuleCall_0_0()); 
	    }
		lv_exs_0_0=ruleExprSimple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprRule());
	        }
       		set(
       			$current, 
       			"exs",
        		lv_exs_0_0, 
        		"ExprSimple");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getExprAccess().getExaExprAndParserRuleCall_1_0()); 
	    }
		lv_exa_1_0=ruleExprAnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprRule());
	        }
       		set(
       			$current, 
       			"exa",
        		lv_exa_1_0, 
        		"ExprAnd");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExprSimple
entryRuleExprSimple returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprSimpleRule()); }
	 iv_ruleExprSimple=ruleExprSimple 
	 { $current=$iv_ruleExprSimple.current; } 
	 EOF 
;

// Rule ExprSimple
ruleExprSimple returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_nil_0_0=	'nil' 
    {
        newLeafNode(lv_nil_0_0, grammarAccess.getExprSimpleAccess().getNilNilKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprSimpleRule());
	        }
       		setWithLastConsumed($current, "nil", lv_nil_0_0, "nil");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getExprSimpleAccess().getVVARParserRuleCall_1_0()); 
	    }
		lv_v_1_0=ruleVAR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprSimpleRule());
	        }
       		set(
       			$current, 
       			"v",
        		lv_v_1_0, 
        		"VAR");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getExprSimpleAccess().getSymSYMBParserRuleCall_2_0()); 
	    }
		lv_sym_2_0=ruleSYMB		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprSimpleRule());
	        }
       		set(
       			$current, 
       			"sym",
        		lv_sym_2_0, 
        		"SYMB");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
(
		lv_mot_4_1=	'cons' 
    {
        newLeafNode(lv_mot_4_1, grammarAccess.getExprSimpleAccess().getMotConsKeyword_3_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprSimpleRule());
	        }
       		setWithLastConsumed($current, "mot", lv_mot_4_1, null);
	    }

    |		lv_mot_4_2=	'list' 
    {
        newLeafNode(lv_mot_4_2, grammarAccess.getExprSimpleAccess().getMotListKeyword_3_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprSimpleRule());
	        }
       		setWithLastConsumed($current, "mot", lv_mot_4_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExprSimpleAccess().getLexLExprParserRuleCall_3_2_0()); 
	    }
		lv_lex_5_0=ruleLExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprSimpleRule());
	        }
       		set(
       			$current, 
       			"lex",
        		lv_lex_5_0, 
        		"LExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_3_3());
    }
)
    |(	otherlv_7='(' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_4_0());
    }
(
(
(
		lv_mot_8_1=	'hd' 
    {
        newLeafNode(lv_mot_8_1, grammarAccess.getExprSimpleAccess().getMotHdKeyword_4_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprSimpleRule());
	        }
       		setWithLastConsumed($current, "mot", lv_mot_8_1, null);
	    }

    |		lv_mot_8_2=	'tl' 
    {
        newLeafNode(lv_mot_8_2, grammarAccess.getExprSimpleAccess().getMotTlKeyword_4_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExprSimpleRule());
	        }
       		setWithLastConsumed($current, "mot", lv_mot_8_2, null);
	    }

)

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExprSimpleAccess().getLCParserRuleCall_4_2()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprSimpleAccess().getExExprParserRuleCall_4_3_0()); 
	    }
		lv_ex_10_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprSimpleRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_10_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_4_4());
    }
)
    |(	otherlv_12='(' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprSimpleAccess().getSymSYMBParserRuleCall_5_1_0()); 
	    }
		lv_sym_13_0=ruleSYMB		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprSimpleRule());
	        }
       		set(
       			$current, 
       			"sym",
        		lv_sym_13_0, 
        		"SYMB");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExprSimpleAccess().getLexLExprParserRuleCall_5_2_0()); 
	    }
		lv_lex_14_0=ruleLExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprSimpleRule());
	        }
       		set(
       			$current, 
       			"lex",
        		lv_lex_14_0, 
        		"LExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_15=')' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_5_3());
    }
))
;





// Entry rule entryRuleLExpr
entryRuleLExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLExprRule()); }
	 iv_ruleLExpr=ruleLExpr 
	 { $current=$iv_ruleLExpr.current; } 
	 EOF 
;

// Rule LExpr
ruleLExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLExprAccess().getLCParserRuleCall_0()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLExprAccess().getEExprParserRuleCall_1_0()); 
	    }
		lv_e_1_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLExprRule());
	        }
       		add(
       			$current, 
       			"e",
        		lv_e_1_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))+
;





// Entry rule entryRuleExprAnd
entryRuleExprAnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprAndRule()); }
	 iv_ruleExprAnd=ruleExprAnd 
	 { $current=$iv_ruleExprAnd.current; } 
	 EOF 
;

// Rule ExprAnd
ruleExprAnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExprAndAccess().getExo1ExprOrParserRuleCall_0_0()); 
	    }
		lv_exo1_0_0=ruleExprOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprAndRule());
	        }
       		set(
       			$current, 
       			"exo1",
        		lv_exo1_0_0, 
        		"ExprOr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExprAndAccess().getLCParserRuleCall_1_0()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='and' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExprAndAccess().getAndKeyword_1_1());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExprAndAccess().getLCParserRuleCall_1_2()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprAndAccess().getExo2ExprOrParserRuleCall_1_3_0()); 
	    }
		lv_exo2_4_0=ruleExprOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprAndRule());
	        }
       		add(
       			$current, 
       			"exo2",
        		lv_exo2_4_0, 
        		"ExprOr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExprOr
entryRuleExprOr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprOrRule()); }
	 iv_ruleExprOr=ruleExprOr 
	 { $current=$iv_ruleExprOr.current; } 
	 EOF 
;

// Rule ExprOr
ruleExprOr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExprOrAccess().getExn1ExprNotParserRuleCall_0_0()); 
	    }
		lv_exn1_0_0=ruleExprNot		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprOrRule());
	        }
       		set(
       			$current, 
       			"exn1",
        		lv_exn1_0_0, 
        		"ExprNot");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExprOrAccess().getLCParserRuleCall_1_0()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='or' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExprOrAccess().getOrKeyword_1_1());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExprOrAccess().getLCParserRuleCall_1_2()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprOrAccess().getExn2ExprNotParserRuleCall_1_3_0()); 
	    }
		lv_exn2_4_0=ruleExprNot		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprOrRule());
	        }
       		add(
       			$current, 
       			"exn2",
        		lv_exn2_4_0, 
        		"ExprNot");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExprNot
entryRuleExprNot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprNotRule()); }
	 iv_ruleExprNot=ruleExprNot 
	 { $current=$iv_ruleExprNot.current; } 
	 EOF 
;

// Rule ExprNot
ruleExprNot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='not' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExprNotAccess().getNotKeyword_0_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExprNotAccess().getLCParserRuleCall_0_1()); 
    }
ruleLC
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprNotAccess().getExQ1ExprEqParserRuleCall_0_2_0()); 
	    }
		lv_exQ1_2_0=ruleExprEq		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprNotRule());
	        }
       		set(
       			$current, 
       			"exQ1",
        		lv_exQ1_2_0, 
        		"ExprEq");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getExprNotAccess().getExQ2ExprEqParserRuleCall_1_0()); 
	    }
		lv_exQ2_3_0=ruleExprEq		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprNotRule());
	        }
       		set(
       			$current, 
       			"exQ2",
        		lv_exQ2_3_0, 
        		"ExprEq");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExprEq
entryRuleExprEq returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprEqRule()); }
	 iv_ruleExprEq=ruleExprEq 
	 { $current=$iv_ruleExprEq.current; } 
	 EOF 
;

// Rule ExprEq
ruleExprEq returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExprEqAccess().getLeftParenthesisKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprEqAccess().getExS1ExprSimpleParserRuleCall_0_1_0()); 
	    }
		lv_exS1_1_0=ruleExprSimple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprEqRule());
	        }
       		set(
       			$current, 
       			"exS1",
        		lv_exS1_1_0, 
        		"ExprSimple");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=?' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExprEqAccess().getEqualsSignQuestionMarkKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprEqAccess().getExS2ExprSimpleParserRuleCall_0_3_0()); 
	    }
		lv_exS2_3_0=ruleExprSimple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprEqRule());
	        }
       		set(
       			$current, 
       			"exS2",
        		lv_exS2_3_0, 
        		"ExprSimple");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExprEqAccess().getRightParenthesisKeyword_0_4());
    }
)
    |(	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExprEqAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprEqAccess().getExExprParserRuleCall_1_1_0()); 
	    }
		lv_ex_6_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprEqRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_6_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExprEqAccess().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRuleVAR
entryRuleVAR returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVARRule()); }
	 iv_ruleVAR=ruleVAR 
	 { $current=$iv_ruleVAR.current; } 
	 EOF 
;

// Rule VAR
ruleVAR returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_bv_0_0=RULE_BASEVAR
		{
			newLeafNode(lv_bv_0_0, grammarAccess.getVARAccess().getBvBASEVARTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVARRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"bv",
        		lv_bv_0_0, 
        		"BASEVAR");
	    }

)
)(
(
		lv_cf_1_0=RULE_CONF
		{
			newLeafNode(lv_cf_1_0, grammarAccess.getVARAccess().getCfCONFTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVARRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"cf",
        		lv_cf_1_0, 
        		"CONF");
	    }

)
))
;





// Entry rule entryRuleSYMB
entryRuleSYMB returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSYMBRule()); }
	 iv_ruleSYMB=ruleSYMB 
	 { $current=$iv_ruleSYMB.current; } 
	 EOF 
;

// Rule SYMB
ruleSYMB returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_bs_0_0=RULE_BASESYMB
		{
			newLeafNode(lv_bs_0_0, grammarAccess.getSYMBAccess().getBsBASESYMBTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSYMBRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"bs",
        		lv_bs_0_0, 
        		"BASESYMB");
	    }

)
)(
(
		lv_cf_1_0=RULE_CONF
		{
			newLeafNode(lv_cf_1_0, grammarAccess.getSYMBAccess().getCfCONFTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSYMBRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"cf",
        		lv_cf_1_0, 
        		"CONF");
	    }

)
))
;





// Entry rule entryRuleLC
entryRuleLC returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLCRule()); } 
	 iv_ruleLC=ruleLC 
	 { $current=$iv_ruleLC.current.getText(); }  
	 EOF 
;

// Rule LC
ruleLC returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLCAccess().getLCsParserRuleCall()); 
    }
    this_LCs_0=ruleLCs    {
		$current.merge(this_LCs_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    ;





// Entry rule entryRuleLCs
entryRuleLCs returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLCsRule()); } 
	 iv_ruleLCs=ruleLCs 
	 { $current=$iv_ruleLCs.current.getText(); }  
	 EOF 
;

// Rule LCs
ruleLCs returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_SP_0=RULE_SP    {
		$current.merge(this_SP_0);
    }

    { 
    newLeafNode(this_SP_0, grammarAccess.getLCsAccess().getSPTerminalRuleCall_0()); 
    }

    |    this_CR_1=RULE_CR    {
		$current.merge(this_CR_1);
    }

    { 
    newLeafNode(this_CR_1, grammarAccess.getLCsAccess().getCRTerminalRuleCall_1()); 
    }

    |    this_TAB_2=RULE_TAB    {
		$current.merge(this_TAB_2);
    }

    { 
    newLeafNode(this_TAB_2, grammarAccess.getLCsAccess().getTABTerminalRuleCall_2()); 
    }

    |    this_LF_3=RULE_LF    {
		$current.merge(this_LF_3);
    }

    { 
    newLeafNode(this_LF_3, grammarAccess.getLCsAccess().getLFTerminalRuleCall_3()); 
    }
)
    ;





RULE_BASEVAR : 'A'..'Z' ('0'..'9'|'a'..'z'|'A'..'Z')*;

RULE_BASESYMB : 'a'..'z' ('0'..'9'|'a'..'z'|'A'..'Z')*;

RULE_CONF : (('-'|'+'|'.'|'/'|'_'|'&'|'->') ('0'..'9'|'a'..'z'|'A'..'Z')+)* ('?'|'!')?;

RULE_SP : ' ';

RULE_CR : '\n';

RULE_TAB : '\t';

RULE_LF : '\r';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


