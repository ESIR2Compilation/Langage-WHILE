/*
 * generated by Xtext
 */
grammar InternalLangage_while;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.Langage_whileGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private Langage_whileGrammarAccess grammarAccess;
 	
    public InternalLangage_whileParser(TokenStream input, Langage_whileGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected Langage_whileGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_0()); 
	    }
		lv_greetings_0_0=ruleGreeting		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"greetings",
        		lv_greetings_0_0, 
        		"Greeting");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleGreeting
entryRuleGreeting returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getGreetingRule()); } 
	 iv_ruleGreeting=ruleGreeting 
	 { $current=$iv_ruleGreeting.current.getText(); }  
	 EOF 
;

// Rule Greeting
ruleGreeting returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getGreetingAccess().getProgramParserRuleCall()); 
    }
    this_Program_0=ruleProgram    {
		$current.merge(this_Program_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleProgram
entryRuleProgram returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); } 
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current.getText(); }  
	 EOF 
;

// Rule Program
ruleProgram returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getProgramAccess().getFunctionParserRuleCall_0()); 
    }
    this_Function_0=ruleFunction    {
		$current.merge(this_Function_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_CR_1=RULE_CR    {
		$current.merge(this_CR_1);
    }

    { 
    newLeafNode(this_CR_1, grammarAccess.getProgramAccess().getCRTerminalRuleCall_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getProgramAccess().getProgramParserRuleCall_1_1()); 
    }
    this_Program_2=ruleProgram    {
		$current.merge(this_Program_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleFunction
entryRuleFunction returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionRule()); } 
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current.getText(); }  
	 EOF 
;

// Rule Function
ruleFunction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='function' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionAccess().getFunctionKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getFunctionAccess().getLCsParserRuleCall_1()); 
    }
    this_LCs_1=ruleLCs    {
		$current.merge(this_LCs_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_SYM_2=RULE_SYM    {
		$current.merge(this_SYM_2);
    }

    { 
    newLeafNode(this_SYM_2, grammarAccess.getFunctionAccess().getSYMTerminalRuleCall_2()); 
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionAccess().getColonKeyword_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getFunctionAccess().getLCsParserRuleCall_4()); 
    }
    this_LCs_4=ruleLCs    {
		$current.merge(this_LCs_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getFunctionAccess().getDefParserRuleCall_5()); 
    }
    this_Def_5=ruleDef    {
		$current.merge(this_Def_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleDef
entryRuleDef returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefRule()); } 
	 iv_ruleDef=ruleDef 
	 { $current=$iv_ruleDef.current.getText(); }  
	 EOF 
;

// Rule Def
ruleDef returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='read' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDefAccess().getReadKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getDefAccess().getLCsParserRuleCall_1()); 
    }
    this_LCs_1=ruleLCs    {
		$current.merge(this_LCs_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getDefAccess().getInputParserRuleCall_2()); 
    }
    this_Input_2=ruleInput    {
		$current.merge(this_Input_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getDefAccess().getLCsParserRuleCall_3()); 
    }
    this_LCs_3=ruleLCs    {
		$current.merge(this_LCs_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDefAccess().getPercentSignKeyword_4()); 
    }

    { 
        newCompositeNode(grammarAccess.getDefAccess().getCommandsParserRuleCall_5()); 
    }
    this_Commands_5=ruleCommands    {
		$current.merge(this_Commands_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getDefAccess().getLCsParserRuleCall_6()); 
    }
    this_LCs_6=ruleLCs    {
		$current.merge(this_LCs_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDefAccess().getPercentSignKeyword_7()); 
    }

	kw='write' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDefAccess().getWriteKeyword_8()); 
    }

    { 
        newCompositeNode(grammarAccess.getDefAccess().getLCsParserRuleCall_9()); 
    }
    this_LCs_9=ruleLCs    {
		$current.merge(this_LCs_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getDefAccess().getOutputParserRuleCall_10()); 
    }
    this_Output_10=ruleOutput    {
		$current.merge(this_Output_10);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleInput
entryRuleInput returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputRule()); } 
	 iv_ruleInput=ruleInput 
	 { $current=$iv_ruleInput.current.getText(); }  
	 EOF 
;

// Rule Input
ruleInput returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_VAR_0=RULE_VAR    {
		$current.merge(this_VAR_0);
    }

    { 
    newLeafNode(this_VAR_0, grammarAccess.getInputAccess().getVARTerminalRuleCall_0_0()); 
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInputAccess().getCommaKeyword_0_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getInputAccess().getLCsParserRuleCall_0_2()); 
    }
    this_LCs_2=ruleLCs    {
		$current.merge(this_LCs_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getInputAccess().getInputParserRuleCall_0_3()); 
    }
    this_Input_3=ruleInput    {
		$current.merge(this_Input_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |    this_VAR_4=RULE_VAR    {
		$current.merge(this_VAR_4);
    }

    { 
    newLeafNode(this_VAR_4, grammarAccess.getInputAccess().getVARTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleOutput
entryRuleOutput returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutputRule()); } 
	 iv_ruleOutput=ruleOutput 
	 { $current=$iv_ruleOutput.current.getText(); }  
	 EOF 
;

// Rule Output
ruleOutput returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_VAR_0=RULE_VAR    {
		$current.merge(this_VAR_0);
    }

    { 
    newLeafNode(this_VAR_0, grammarAccess.getOutputAccess().getVARTerminalRuleCall_0_0()); 
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutputAccess().getCommaKeyword_0_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getOutputAccess().getLCsParserRuleCall_0_2()); 
    }
    this_LCs_2=ruleLCs    {
		$current.merge(this_LCs_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getOutputAccess().getOutputParserRuleCall_0_3()); 
    }
    this_Output_3=ruleOutput    {
		$current.merge(this_Output_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |    this_VAR_4=RULE_VAR    {
		$current.merge(this_VAR_4);
    }

    { 
    newLeafNode(this_VAR_4, grammarAccess.getOutputAccess().getVARTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleCommands
entryRuleCommands returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommandsRule()); } 
	 iv_ruleCommands=ruleCommands 
	 { $current=$iv_ruleCommands.current.getText(); }  
	 EOF 
;

// Rule Commands
ruleCommands returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCommandsAccess().getCommandParserRuleCall_0()); 
    }
    this_Command_0=ruleCommand    {
		$current.merge(this_Command_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandsAccess().getSemicolonKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCommandsAccess().getLCsParserRuleCall_1_1()); 
    }
    this_LCs_2=ruleLCs    {
		$current.merge(this_LCs_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandsAccess().getCommandsParserRuleCall_1_2()); 
    }
    this_Commands_3=ruleCommands    {
		$current.merge(this_Commands_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleCommand
entryRuleCommand returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommandRule()); } 
	 iv_ruleCommand=ruleCommand 
	 { $current=$iv_ruleCommand.current.getText(); }  
	 EOF 
;

// Rule Command
ruleCommand returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='nop' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandAccess().getNopKeyword_0()); 
    }

    |(
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getVarsParserRuleCall_1_0()); 
    }
    this_Vars_1=ruleVars    {
		$current.merge(this_Vars_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getLCsParserRuleCall_1_1()); 
    }
    this_LCs_2=ruleLCs    {
		$current.merge(this_LCs_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=':=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandAccess().getColonEqualsSignKeyword_1_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getLCsParserRuleCall_1_3()); 
    }
    this_LCs_4=ruleLCs    {
		$current.merge(this_LCs_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getEXPRSParserRuleCall_1_4()); 
    }
    this_EXPRS_5=ruleEXPRS    {
		$current.merge(this_EXPRS_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='while' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandAccess().getWhileKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getLCsParserRuleCall_2_1()); 
    }
    this_LCs_7=ruleLCs    {
		$current.merge(this_LCs_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getEXPRParserRuleCall_2_2()); 
    }
    this_EXPR_8=ruleEXPR    {
		$current.merge(this_EXPR_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getLCsParserRuleCall_2_3()); 
    }
    this_LCs_9=ruleLCs    {
		$current.merge(this_LCs_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='do' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandAccess().getDoKeyword_2_4()); 
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getLCsParserRuleCall_2_5()); 
    }
    this_LCs_11=ruleLCs    {
		$current.merge(this_LCs_11);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getCommandsParserRuleCall_2_6()); 
    }
    this_Commands_12=ruleCommands    {
		$current.merge(this_Commands_12);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getLCsParserRuleCall_2_7()); 
    }
    this_LCs_13=ruleLCs    {
		$current.merge(this_LCs_13);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='od' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandAccess().getOdKeyword_2_8()); 
    }
)
    |(
	kw='for' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandAccess().getForKeyword_3_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getLCsParserRuleCall_3_1()); 
    }
    this_LCs_16=ruleLCs    {
		$current.merge(this_LCs_16);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getEXPRParserRuleCall_3_2()); 
    }
    this_EXPR_17=ruleEXPR    {
		$current.merge(this_EXPR_17);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getLCsParserRuleCall_3_3()); 
    }
    this_LCs_18=ruleLCs    {
		$current.merge(this_LCs_18);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='do' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandAccess().getDoKeyword_3_4()); 
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getLCsParserRuleCall_3_5()); 
    }
    this_LCs_20=ruleLCs    {
		$current.merge(this_LCs_20);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getCommandsParserRuleCall_3_6()); 
    }
    this_Commands_21=ruleCommands    {
		$current.merge(this_Commands_21);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getLCsParserRuleCall_3_7()); 
    }
    this_LCs_22=ruleLCs    {
		$current.merge(this_LCs_22);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='od' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandAccess().getOdKeyword_3_8()); 
    }
)
    |(
	kw='if' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandAccess().getIfKeyword_4_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getLCsParserRuleCall_4_1()); 
    }
    this_LCs_25=ruleLCs    {
		$current.merge(this_LCs_25);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getEXPRParserRuleCall_4_2()); 
    }
    this_EXPR_26=ruleEXPR    {
		$current.merge(this_EXPR_26);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getLCsParserRuleCall_4_3()); 
    }
    this_LCs_27=ruleLCs    {
		$current.merge(this_LCs_27);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='then' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandAccess().getThenKeyword_4_4()); 
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getLCsParserRuleCall_4_5()); 
    }
    this_LCs_29=ruleLCs    {
		$current.merge(this_LCs_29);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getCommandsParserRuleCall_4_6()); 
    }
    this_Commands_30=ruleCommands    {
		$current.merge(this_Commands_30);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getLCsParserRuleCall_4_7()); 
    }
    this_LCs_31=ruleLCs    {
		$current.merge(this_LCs_31);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='else' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandAccess().getElseKeyword_4_8_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getLCsParserRuleCall_4_8_1()); 
    }
    this_LCs_33=ruleLCs    {
		$current.merge(this_LCs_33);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getCommandsParserRuleCall_4_8_2()); 
    }
    this_Commands_34=ruleCommands    {
		$current.merge(this_Commands_34);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getLCsParserRuleCall_4_8_3()); 
    }
    this_LCs_35=ruleLCs    {
		$current.merge(this_LCs_35);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw='fi' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandAccess().getFiKeyword_4_9()); 
    }
)
    |(
	kw='foreach' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandAccess().getForeachKeyword_5_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getLCsParserRuleCall_5_1()); 
    }
    this_LCs_38=ruleLCs    {
		$current.merge(this_LCs_38);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getEXPRParserRuleCall_5_2()); 
    }
    this_EXPR_39=ruleEXPR    {
		$current.merge(this_EXPR_39);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getLCsParserRuleCall_5_3()); 
    }
    this_LCs_40=ruleLCs    {
		$current.merge(this_LCs_40);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='in' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandAccess().getInKeyword_5_4()); 
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getLCsParserRuleCall_5_5()); 
    }
    this_LCs_42=ruleLCs    {
		$current.merge(this_LCs_42);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getEXPRParserRuleCall_5_6()); 
    }
    this_EXPR_43=ruleEXPR    {
		$current.merge(this_EXPR_43);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getLCsParserRuleCall_5_7()); 
    }
    this_LCs_44=ruleLCs    {
		$current.merge(this_LCs_44);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='do' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandAccess().getDoKeyword_5_8()); 
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getLCsParserRuleCall_5_9()); 
    }
    this_LCs_46=ruleLCs    {
		$current.merge(this_LCs_46);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getCommandsParserRuleCall_5_10()); 
    }
    this_Commands_47=ruleCommands    {
		$current.merge(this_Commands_47);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getCommandAccess().getLCsParserRuleCall_5_11()); 
    }
    this_LCs_48=ruleLCs    {
		$current.merge(this_LCs_48);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='od' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCommandAccess().getOdKeyword_5_12()); 
    }
))
    ;





// Entry rule entryRuleVars
entryRuleVars returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarsRule()); } 
	 iv_ruleVars=ruleVars 
	 { $current=$iv_ruleVars.current.getText(); }  
	 EOF 
;

// Rule Vars
ruleVars returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_VAR_0=RULE_VAR    {
		$current.merge(this_VAR_0);
    }

    { 
    newLeafNode(this_VAR_0, grammarAccess.getVarsAccess().getVARTerminalRuleCall_0()); 
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarsAccess().getCommaKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getVarsAccess().getLCsParserRuleCall_1_1()); 
    }
    this_LCs_2=ruleLCs    {
		$current.merge(this_LCs_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getVarsAccess().getVarsParserRuleCall_1_2()); 
    }
    this_Vars_3=ruleVars    {
		$current.merge(this_Vars_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleEXPRS
entryRuleEXPRS returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEXPRSRule()); } 
	 iv_ruleEXPRS=ruleEXPRS 
	 { $current=$iv_ruleEXPRS.current.getText(); }  
	 EOF 
;

// Rule EXPRS
ruleEXPRS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEXPRSAccess().getEXPRParserRuleCall_0()); 
    }
    this_EXPR_0=ruleEXPR    {
		$current.merge(this_EXPR_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEXPRSAccess().getCommaKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getEXPRSAccess().getLCsParserRuleCall_1_1()); 
    }
    this_LCs_2=ruleLCs    {
		$current.merge(this_LCs_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getEXPRSAccess().getEXPRSParserRuleCall_1_2()); 
    }
    this_EXPRS_3=ruleEXPRS    {
		$current.merge(this_EXPRS_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleEXPR
entryRuleEXPR returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEXPRRule()); } 
	 iv_ruleEXPR=ruleEXPR 
	 { $current=$iv_ruleEXPR.current.getText(); }  
	 EOF 
;

// Rule EXPR
ruleEXPR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEXPRAccess().getEXPRSIMPLEParserRuleCall_0()); 
    }
    this_EXPRSIMPLE_0=ruleEXPRSIMPLE    {
		$current.merge(this_EXPRSIMPLE_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEXPRAccess().getEXPRANDParserRuleCall_1()); 
    }
    this_EXPRAND_1=ruleEXPRAND    {
		$current.merge(this_EXPRAND_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleEXPRSIMPLE
entryRuleEXPRSIMPLE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEXPRSIMPLERule()); } 
	 iv_ruleEXPRSIMPLE=ruleEXPRSIMPLE 
	 { $current=$iv_ruleEXPRSIMPLE.current.getText(); }  
	 EOF 
;

// Rule EXPRSIMPLE
ruleEXPRSIMPLE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='nil' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEXPRSIMPLEAccess().getNilKeyword_0_0()); 
    }

    |    this_VAR_1=RULE_VAR    {
		$current.merge(this_VAR_1);
    }

    { 
    newLeafNode(this_VAR_1, grammarAccess.getEXPRSIMPLEAccess().getVARTerminalRuleCall_0_1()); 
    }

    |    this_SYM_2=RULE_SYM    {
		$current.merge(this_SYM_2);
    }

    { 
    newLeafNode(this_SYM_2, grammarAccess.getEXPRSIMPLEAccess().getSYMTerminalRuleCall_0_2()); 
    }
)
    |((
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEXPRSIMPLEAccess().getLeftParenthesisKeyword_1_0_0()); 
    }

	kw='cons' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEXPRSIMPLEAccess().getConsKeyword_1_0_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getEXPRSIMPLEAccess().getLEXPRParserRuleCall_1_0_2()); 
    }
    this_LEXPR_5=ruleLEXPR    {
		$current.merge(this_LEXPR_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEXPRSIMPLEAccess().getRightParenthesisKeyword_1_0_3()); 
    }
)
    |(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEXPRSIMPLEAccess().getLeftParenthesisKeyword_1_1_0()); 
    }

	kw='list' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEXPRSIMPLEAccess().getListKeyword_1_1_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getEXPRSIMPLEAccess().getLEXPRParserRuleCall_1_1_2()); 
    }
    this_LEXPR_9=ruleLEXPR    {
		$current.merge(this_LEXPR_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEXPRSIMPLEAccess().getRightParenthesisKeyword_1_1_3()); 
    }
))
    |((
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEXPRSIMPLEAccess().getLeftParenthesisKeyword_2_0_0()); 
    }

	kw='hd' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEXPRSIMPLEAccess().getHdKeyword_2_0_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getEXPRSIMPLEAccess().getLCsParserRuleCall_2_0_2()); 
    }
    this_LCs_13=ruleLCs    {
		$current.merge(this_LCs_13);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getEXPRSIMPLEAccess().getEXPRParserRuleCall_2_0_3()); 
    }
    this_EXPR_14=ruleEXPR    {
		$current.merge(this_EXPR_14);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEXPRSIMPLEAccess().getRightParenthesisKeyword_2_0_4()); 
    }
)
    |(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEXPRSIMPLEAccess().getLeftParenthesisKeyword_2_1_0()); 
    }

	kw='tl' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEXPRSIMPLEAccess().getTlKeyword_2_1_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getEXPRSIMPLEAccess().getLCsParserRuleCall_2_1_2()); 
    }
    this_LCs_18=ruleLCs    {
		$current.merge(this_LCs_18);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getEXPRSIMPLEAccess().getEXPRParserRuleCall_2_1_3()); 
    }
    this_EXPR_19=ruleEXPR    {
		$current.merge(this_EXPR_19);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEXPRSIMPLEAccess().getRightParenthesisKeyword_2_1_4()); 
    }
))
    |(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEXPRSIMPLEAccess().getLeftParenthesisKeyword_3_0()); 
    }
    this_SYM_22=RULE_SYM    {
		$current.merge(this_SYM_22);
    }

    { 
    newLeafNode(this_SYM_22, grammarAccess.getEXPRSIMPLEAccess().getSYMTerminalRuleCall_3_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getEXPRSIMPLEAccess().getLEXPRParserRuleCall_3_2()); 
    }
    this_LEXPR_23=ruleLEXPR    {
		$current.merge(this_LEXPR_23);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEXPRSIMPLEAccess().getRightParenthesisKeyword_3_3()); 
    }
))
    ;





// Entry rule entryRuleLEXPR
entryRuleLEXPR returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLEXPRRule()); } 
	 iv_ruleLEXPR=ruleLEXPR 
	 { $current=$iv_ruleLEXPR.current.getText(); }  
	 EOF 
;

// Rule LEXPR
ruleLEXPR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLEXPRAccess().getLCsParserRuleCall_0()); 
    }
    this_LCs_0=ruleLCs    {
		$current.merge(this_LCs_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getLEXPRAccess().getEXPRParserRuleCall_1()); 
    }
    this_EXPR_1=ruleEXPR    {
		$current.merge(this_EXPR_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getLEXPRAccess().getLEXPRParserRuleCall_2()); 
    }
    this_LEXPR_2=ruleLEXPR    {
		$current.merge(this_LEXPR_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleEXPRAND
entryRuleEXPRAND returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEXPRANDRule()); } 
	 iv_ruleEXPRAND=ruleEXPRAND 
	 { $current=$iv_ruleEXPRAND.current.getText(); }  
	 EOF 
;

// Rule EXPRAND
ruleEXPRAND returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEXPRANDAccess().getEXPRORParserRuleCall_0()); 
    }
    this_EXPROR_0=ruleEXPROR    {
		$current.merge(this_EXPROR_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getEXPRANDAccess().getLCsParserRuleCall_1_0()); 
    }
    this_LCs_1=ruleLCs    {
		$current.merge(this_LCs_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='and' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEXPRANDAccess().getAndKeyword_1_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getEXPRANDAccess().getLCsParserRuleCall_1_2()); 
    }
    this_LCs_3=ruleLCs    {
		$current.merge(this_LCs_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getEXPRANDAccess().getEXPRANDParserRuleCall_1_3()); 
    }
    this_EXPRAND_4=ruleEXPRAND    {
		$current.merge(this_EXPRAND_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleEXPROR
entryRuleEXPROR returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEXPRORRule()); } 
	 iv_ruleEXPROR=ruleEXPROR 
	 { $current=$iv_ruleEXPROR.current.getText(); }  
	 EOF 
;

// Rule EXPROR
ruleEXPROR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEXPRORAccess().getEXPRNOTParserRuleCall_0()); 
    }
    this_EXPRNOT_0=ruleEXPRNOT    {
		$current.merge(this_EXPRNOT_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getEXPRORAccess().getLCsParserRuleCall_1_0()); 
    }
    this_LCs_1=ruleLCs    {
		$current.merge(this_LCs_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='or' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEXPRORAccess().getOrKeyword_1_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getEXPRORAccess().getLCsParserRuleCall_1_2()); 
    }
    this_LCs_3=ruleLCs    {
		$current.merge(this_LCs_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getEXPRORAccess().getEXPRORParserRuleCall_1_3()); 
    }
    this_EXPROR_4=ruleEXPROR    {
		$current.merge(this_EXPROR_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleEXPRNOT
entryRuleEXPRNOT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEXPRNOTRule()); } 
	 iv_ruleEXPRNOT=ruleEXPRNOT 
	 { $current=$iv_ruleEXPRNOT.current.getText(); }  
	 EOF 
;

// Rule EXPRNOT
ruleEXPRNOT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='not' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEXPRNOTAccess().getNotKeyword_0_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getEXPRNOTAccess().getLCsParserRuleCall_0_1()); 
    }
    this_LCs_1=ruleLCs    {
		$current.merge(this_LCs_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getEXPRNOTAccess().getEXPREQParserRuleCall_1()); 
    }
    this_EXPREQ_2=ruleEXPREQ    {
		$current.merge(this_EXPREQ_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleEXPREQ
entryRuleEXPREQ returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEXPREQRule()); } 
	 iv_ruleEXPREQ=ruleEXPREQ 
	 { $current=$iv_ruleEXPREQ.current.getText(); }  
	 EOF 
;

// Rule EXPREQ
ruleEXPREQ returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getEXPREQAccess().getEXPRSIMPLEParserRuleCall_0_0()); 
    }
    this_EXPRSIMPLE_0=ruleEXPRSIMPLE    {
		$current.merge(this_EXPRSIMPLE_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getEXPREQAccess().getLCsParserRuleCall_0_1()); 
    }
    this_LCs_1=ruleLCs    {
		$current.merge(this_LCs_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='=?' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEXPREQAccess().getEqualsSignQuestionMarkKeyword_0_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getEXPREQAccess().getLCsParserRuleCall_0_3()); 
    }
    this_LCs_3=ruleLCs    {
		$current.merge(this_LCs_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getEXPREQAccess().getEXPRSIMPLEParserRuleCall_0_4()); 
    }
    this_EXPRSIMPLE_4=ruleEXPRSIMPLE    {
		$current.merge(this_EXPRSIMPLE_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEXPREQAccess().getLeftParenthesisKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getEXPREQAccess().getEXPRParserRuleCall_1_1()); 
    }
    this_EXPR_6=ruleEXPR    {
		$current.merge(this_EXPR_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEXPREQAccess().getRightParenthesisKeyword_1_2()); 
    }
))
    ;











// Entry rule entryRuleLCs
entryRuleLCs returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLCsRule()); } 
	 iv_ruleLCs=ruleLCs 
	 { $current=$iv_ruleLCs.current.getText(); }  
	 EOF 
;

// Rule LCs
ruleLCs returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLCsAccess().getLCParserRuleCall()); 
    }
    this_LC_0=ruleLC    {
		$current.merge(this_LC_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    ;





// Entry rule entryRuleLC
entryRuleLC returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLCRule()); } 
	 iv_ruleLC=ruleLC 
	 { $current=$iv_ruleLC.current.getText(); }  
	 EOF 
;

// Rule LC
ruleLC returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_SP_0=RULE_SP    {
		$current.merge(this_SP_0);
    }

    { 
    newLeafNode(this_SP_0, grammarAccess.getLCAccess().getSPTerminalRuleCall_0()); 
    }

    |    this_CR_1=RULE_CR    {
		$current.merge(this_CR_1);
    }

    { 
    newLeafNode(this_CR_1, grammarAccess.getLCAccess().getCRTerminalRuleCall_1()); 
    }

    |    this_TAB_2=RULE_TAB    {
		$current.merge(this_TAB_2);
    }

    { 
    newLeafNode(this_TAB_2, grammarAccess.getLCAccess().getTABTerminalRuleCall_2()); 
    }

    |    this_LF_3=RULE_LF    {
		$current.merge(this_LF_3);
    }

    { 
    newLeafNode(this_LF_3, grammarAccess.getLCAccess().getLFTerminalRuleCall_3()); 
    }
)
    ;





RULE_VAR : 'A'..'Z' ('a'..'z'|'A'..'Z'|'0'..'9')* RULE_CONF;

RULE_SYM : 'a'..'z' ('a'..'z'|'A'..'Z'|'0'..'9')* RULE_CONF;

RULE_CONF : (('-'|'+'|'.'|'/'|'_'|'&'|'->') ('a'..'z'|'A'..'Z'|'0'..'9')+)* ('?'|'!');

RULE_SP : ' ';

RULE_CR : '\n';

RULE_TAB : '\t';

RULE_LF : '\r';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


