/*
 * generated by Xtext
 */
package org.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.services.Langage_whileGrammarAccess;

public class Langage_whileParser extends AbstractContentAssistParser {
	
	@Inject
	private Langage_whileGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.ui.contentassist.antlr.internal.InternalLangage_whileParser createParser() {
		org.xtext.ui.contentassist.antlr.internal.InternalLangage_whileParser result = new org.xtext.ui.contentassist.antlr.internal.InternalLangage_whileParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
					put(grammarAccess.getExprAccess().getAlternatives(), "rule__Expr__Alternatives");
					put(grammarAccess.getExprSimpleAccess().getAlternatives(), "rule__ExprSimple__Alternatives");
					put(grammarAccess.getExprSimpleAccess().getMotAlternatives_3_1_0(), "rule__ExprSimple__MotAlternatives_3_1_0");
					put(grammarAccess.getExprSimpleAccess().getMotAlternatives_4_1_0(), "rule__ExprSimple__MotAlternatives_4_1_0");
					put(grammarAccess.getExprNotAccess().getAlternatives(), "rule__ExprNot__Alternatives");
					put(grammarAccess.getExprEqAccess().getAlternatives(), "rule__ExprEq__Alternatives");
					put(grammarAccess.getLCsAccess().getAlternatives(), "rule__LCs__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
					put(grammarAccess.getDefinitionAccess().getGroup(), "rule__Definition__Group__0");
					put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
					put(grammarAccess.getInputAccess().getGroup_1(), "rule__Input__Group_1__0");
					put(grammarAccess.getOutputAccess().getGroup(), "rule__Output__Group__0");
					put(grammarAccess.getOutputAccess().getGroup_1(), "rule__Output__Group_1__0");
					put(grammarAccess.getCommandsAccess().getGroup(), "rule__Commands__Group__0");
					put(grammarAccess.getCommandsAccess().getGroup_1(), "rule__Commands__Group_1__0");
					put(grammarAccess.getAssignAccess().getGroup(), "rule__Assign__Group__0");
					put(grammarAccess.getWhileAccess().getGroup(), "rule__While__Group__0");
					put(grammarAccess.getForAccess().getGroup(), "rule__For__Group__0");
					put(grammarAccess.getIfAccess().getGroup(), "rule__If__Group__0");
					put(grammarAccess.getForeachAccess().getGroup(), "rule__Foreach__Group__0");
					put(grammarAccess.getIfconfortAccess().getGroup(), "rule__Ifconfort__Group__0");
					put(grammarAccess.getVarsAccess().getGroup(), "rule__Vars__Group__0");
					put(grammarAccess.getVarsAccess().getGroup_1(), "rule__Vars__Group_1__0");
					put(grammarAccess.getExprsAccess().getGroup(), "rule__Exprs__Group__0");
					put(grammarAccess.getExprsAccess().getGroup_1(), "rule__Exprs__Group_1__0");
					put(grammarAccess.getExprSimpleAccess().getGroup_3(), "rule__ExprSimple__Group_3__0");
					put(grammarAccess.getExprSimpleAccess().getGroup_4(), "rule__ExprSimple__Group_4__0");
					put(grammarAccess.getExprSimpleAccess().getGroup_5(), "rule__ExprSimple__Group_5__0");
					put(grammarAccess.getLExprAccess().getGroup(), "rule__LExpr__Group__0");
					put(grammarAccess.getExprAndAccess().getGroup(), "rule__ExprAnd__Group__0");
					put(grammarAccess.getExprAndAccess().getGroup_1(), "rule__ExprAnd__Group_1__0");
					put(grammarAccess.getExprOrAccess().getGroup(), "rule__ExprOr__Group__0");
					put(grammarAccess.getExprOrAccess().getGroup_1(), "rule__ExprOr__Group_1__0");
					put(grammarAccess.getExprNotAccess().getGroup_0(), "rule__ExprNot__Group_0__0");
					put(grammarAccess.getExprEqAccess().getGroup_0(), "rule__ExprEq__Group_0__0");
					put(grammarAccess.getExprEqAccess().getGroup_1(), "rule__ExprEq__Group_1__0");
					put(grammarAccess.getVARAccess().getGroup(), "rule__VAR__Group__0");
					put(grammarAccess.getSYMBAccess().getGroup(), "rule__SYMB__Group__0");
					put(grammarAccess.getModelAccess().getProgAssignment_0(), "rule__Model__ProgAssignment_0");
					put(grammarAccess.getFunctionAccess().getNameAssignment_2(), "rule__Function__NameAssignment_2");
					put(grammarAccess.getFunctionAccess().getDefAssignment_5(), "rule__Function__DefAssignment_5");
					put(grammarAccess.getDefinitionAccess().getInAssignment_2(), "rule__Definition__InAssignment_2");
					put(grammarAccess.getDefinitionAccess().getComAssignment_5(), "rule__Definition__ComAssignment_5");
					put(grammarAccess.getDefinitionAccess().getOutAssignment_10(), "rule__Definition__OutAssignment_10");
					put(grammarAccess.getInputAccess().getVAssignment_0(), "rule__Input__VAssignment_0");
					put(grammarAccess.getInputAccess().getVAssignment_1_1(), "rule__Input__VAssignment_1_1");
					put(grammarAccess.getOutputAccess().getVAssignment_0(), "rule__Output__VAssignment_0");
					put(grammarAccess.getOutputAccess().getVAssignment_1_1(), "rule__Output__VAssignment_1_1");
					put(grammarAccess.getCommandsAccess().getCAssignment_0(), "rule__Commands__CAssignment_0");
					put(grammarAccess.getCommandsAccess().getCAssignment_1_2(), "rule__Commands__CAssignment_1_2");
					put(grammarAccess.getCommandAccess().getNopAssignment_0(), "rule__Command__NopAssignment_0");
					put(grammarAccess.getCommandAccess().getAssignAssignment_1(), "rule__Command__AssignAssignment_1");
					put(grammarAccess.getCommandAccess().getWhAssignment_2(), "rule__Command__WhAssignment_2");
					put(grammarAccess.getCommandAccess().getForAssignment_3(), "rule__Command__ForAssignment_3");
					put(grammarAccess.getCommandAccess().getIfAssignment_4(), "rule__Command__IfAssignment_4");
					put(grammarAccess.getCommandAccess().getForeAssignment_5(), "rule__Command__ForeAssignment_5");
					put(grammarAccess.getCommandAccess().getIfcAssignment_6(), "rule__Command__IfcAssignment_6");
					put(grammarAccess.getAssignAccess().getVsAssignment_0(), "rule__Assign__VsAssignment_0");
					put(grammarAccess.getAssignAccess().getExAssignment_4(), "rule__Assign__ExAssignment_4");
					put(grammarAccess.getWhileAccess().getExAssignment_2(), "rule__While__ExAssignment_2");
					put(grammarAccess.getWhileAccess().getCAssignment_6(), "rule__While__CAssignment_6");
					put(grammarAccess.getForAccess().getExAssignment_2(), "rule__For__ExAssignment_2");
					put(grammarAccess.getForAccess().getCAssignment_6(), "rule__For__CAssignment_6");
					put(grammarAccess.getIfAccess().getExAssignment_2(), "rule__If__ExAssignment_2");
					put(grammarAccess.getIfAccess().getCtAssignment_6(), "rule__If__CtAssignment_6");
					put(grammarAccess.getIfAccess().getCeAssignment_10(), "rule__If__CeAssignment_10");
					put(grammarAccess.getForeachAccess().getEx1Assignment_2(), "rule__Foreach__Ex1Assignment_2");
					put(grammarAccess.getForeachAccess().getEx2Assignment_6(), "rule__Foreach__Ex2Assignment_6");
					put(grammarAccess.getForeachAccess().getCAssignment_10(), "rule__Foreach__CAssignment_10");
					put(grammarAccess.getIfconfortAccess().getExAssignment_2(), "rule__Ifconfort__ExAssignment_2");
					put(grammarAccess.getIfconfortAccess().getCAssignment_6(), "rule__Ifconfort__CAssignment_6");
					put(grammarAccess.getVarsAccess().getVsAssignment_0(), "rule__Vars__VsAssignment_0");
					put(grammarAccess.getVarsAccess().getVsAssignment_1_1(), "rule__Vars__VsAssignment_1_1");
					put(grammarAccess.getExprsAccess().getExAssignment_0(), "rule__Exprs__ExAssignment_0");
					put(grammarAccess.getExprsAccess().getExAssignment_1_1(), "rule__Exprs__ExAssignment_1_1");
					put(grammarAccess.getExprAccess().getExsAssignment_0(), "rule__Expr__ExsAssignment_0");
					put(grammarAccess.getExprAccess().getExaAssignment_1(), "rule__Expr__ExaAssignment_1");
					put(grammarAccess.getExprSimpleAccess().getNilAssignment_0(), "rule__ExprSimple__NilAssignment_0");
					put(grammarAccess.getExprSimpleAccess().getVAssignment_1(), "rule__ExprSimple__VAssignment_1");
					put(grammarAccess.getExprSimpleAccess().getSymAssignment_2(), "rule__ExprSimple__SymAssignment_2");
					put(grammarAccess.getExprSimpleAccess().getMotAssignment_3_1(), "rule__ExprSimple__MotAssignment_3_1");
					put(grammarAccess.getExprSimpleAccess().getLexAssignment_3_2(), "rule__ExprSimple__LexAssignment_3_2");
					put(grammarAccess.getExprSimpleAccess().getMotAssignment_4_1(), "rule__ExprSimple__MotAssignment_4_1");
					put(grammarAccess.getExprSimpleAccess().getExAssignment_4_3(), "rule__ExprSimple__ExAssignment_4_3");
					put(grammarAccess.getExprSimpleAccess().getSymAssignment_5_1(), "rule__ExprSimple__SymAssignment_5_1");
					put(grammarAccess.getExprSimpleAccess().getLexAssignment_5_2(), "rule__ExprSimple__LexAssignment_5_2");
					put(grammarAccess.getLExprAccess().getEAssignment_1(), "rule__LExpr__EAssignment_1");
					put(grammarAccess.getExprAndAccess().getExo1Assignment_0(), "rule__ExprAnd__Exo1Assignment_0");
					put(grammarAccess.getExprAndAccess().getExo2Assignment_1_3(), "rule__ExprAnd__Exo2Assignment_1_3");
					put(grammarAccess.getExprOrAccess().getExn1Assignment_0(), "rule__ExprOr__Exn1Assignment_0");
					put(grammarAccess.getExprOrAccess().getExn2Assignment_1_3(), "rule__ExprOr__Exn2Assignment_1_3");
					put(grammarAccess.getExprNotAccess().getExQ1Assignment_0_2(), "rule__ExprNot__ExQ1Assignment_0_2");
					put(grammarAccess.getExprNotAccess().getExQ2Assignment_1(), "rule__ExprNot__ExQ2Assignment_1");
					put(grammarAccess.getExprEqAccess().getExS1Assignment_0_1(), "rule__ExprEq__ExS1Assignment_0_1");
					put(grammarAccess.getExprEqAccess().getExS2Assignment_0_3(), "rule__ExprEq__ExS2Assignment_0_3");
					put(grammarAccess.getExprEqAccess().getExAssignment_1_1(), "rule__ExprEq__ExAssignment_1_1");
					put(grammarAccess.getVARAccess().getBvAssignment_0(), "rule__VAR__BvAssignment_0");
					put(grammarAccess.getVARAccess().getCfAssignment_1(), "rule__VAR__CfAssignment_1");
					put(grammarAccess.getSYMBAccess().getBsAssignment_0(), "rule__SYMB__BsAssignment_0");
					put(grammarAccess.getSYMBAccess().getCfAssignment_1(), "rule__SYMB__CfAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.ui.contentassist.antlr.internal.InternalLangage_whileParser typedParser = (org.xtext.ui.contentassist.antlr.internal.InternalLangage_whileParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public Langage_whileGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(Langage_whileGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
