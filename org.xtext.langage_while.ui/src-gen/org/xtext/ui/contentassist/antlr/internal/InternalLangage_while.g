/*
 * generated by Xtext
 */
grammar InternalLangage_while;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package org.xtext.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.services.Langage_whileGrammarAccess;

}

@parser::members {
 
 	private Langage_whileGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(Langage_whileGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)*
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunction
entryRuleFunction 
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionAccess().getGroup()); }
(rule__Function__Group__0)
{ after(grammarAccess.getFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefinition
entryRuleDefinition 
:
{ before(grammarAccess.getDefinitionRule()); }
	 ruleDefinition
{ after(grammarAccess.getDefinitionRule()); } 
	 EOF 
;

// Rule Definition
ruleDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDefinitionAccess().getGroup()); }
(rule__Definition__Group__0)
{ after(grammarAccess.getDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInput
entryRuleInput 
:
{ before(grammarAccess.getInputRule()); }
	 ruleInput
{ after(grammarAccess.getInputRule()); } 
	 EOF 
;

// Rule Input
ruleInput
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInputAccess().getGroup()); }
(rule__Input__Group__0)
{ after(grammarAccess.getInputAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOutput
entryRuleOutput 
:
{ before(grammarAccess.getOutputRule()); }
	 ruleOutput
{ after(grammarAccess.getOutputRule()); } 
	 EOF 
;

// Rule Output
ruleOutput
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOutputAccess().getGroup()); }
(rule__Output__Group__0)
{ after(grammarAccess.getOutputAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCommands
entryRuleCommands 
:
{ before(grammarAccess.getCommandsRule()); }
	 ruleCommands
{ after(grammarAccess.getCommandsRule()); } 
	 EOF 
;

// Rule Commands
ruleCommands
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommandsAccess().getGroup()); }
(rule__Commands__Group__0)
{ after(grammarAccess.getCommandsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCommand
entryRuleCommand 
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommandAccess().getAlternatives()); }
(rule__Command__Alternatives)
{ after(grammarAccess.getCommandAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssign
entryRuleAssign 
:
{ before(grammarAccess.getAssignRule()); }
	 ruleAssign
{ after(grammarAccess.getAssignRule()); } 
	 EOF 
;

// Rule Assign
ruleAssign
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignAccess().getGroup()); }
(rule__Assign__Group__0)
{ after(grammarAccess.getAssignAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhile
entryRuleWhile 
:
{ before(grammarAccess.getWhileRule()); }
	 ruleWhile
{ after(grammarAccess.getWhileRule()); } 
	 EOF 
;

// Rule While
ruleWhile
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhileAccess().getGroup()); }
(rule__While__Group__0)
{ after(grammarAccess.getWhileAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFor
entryRuleFor 
:
{ before(grammarAccess.getForRule()); }
	 ruleFor
{ after(grammarAccess.getForRule()); } 
	 EOF 
;

// Rule For
ruleFor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForAccess().getGroup()); }
(rule__For__Group__0)
{ after(grammarAccess.getForAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIf
entryRuleIf 
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfAccess().getGroup()); }
(rule__If__Group__0)
{ after(grammarAccess.getIfAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForeach
entryRuleForeach 
:
{ before(grammarAccess.getForeachRule()); }
	 ruleForeach
{ after(grammarAccess.getForeachRule()); } 
	 EOF 
;

// Rule Foreach
ruleForeach
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForeachAccess().getGroup()); }
(rule__Foreach__Group__0)
{ after(grammarAccess.getForeachAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfconfort
entryRuleIfconfort 
:
{ before(grammarAccess.getIfconfortRule()); }
	 ruleIfconfort
{ after(grammarAccess.getIfconfortRule()); } 
	 EOF 
;

// Rule Ifconfort
ruleIfconfort
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfconfortAccess().getGroup()); }
(rule__Ifconfort__Group__0)
{ after(grammarAccess.getIfconfortAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVars
entryRuleVars 
:
{ before(grammarAccess.getVarsRule()); }
	 ruleVars
{ after(grammarAccess.getVarsRule()); } 
	 EOF 
;

// Rule Vars
ruleVars
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarsAccess().getGroup()); }
(rule__Vars__Group__0)
{ after(grammarAccess.getVarsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExprs
entryRuleExprs 
:
{ before(grammarAccess.getExprsRule()); }
	 ruleExprs
{ after(grammarAccess.getExprsRule()); } 
	 EOF 
;

// Rule Exprs
ruleExprs
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExprsAccess().getGroup()); }
(rule__Exprs__Group__0)
{ after(grammarAccess.getExprsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpr
entryRuleExpr 
:
{ before(grammarAccess.getExprRule()); }
	 ruleExpr
{ after(grammarAccess.getExprRule()); } 
	 EOF 
;

// Rule Expr
ruleExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExprAccess().getAlternatives()); }
(rule__Expr__Alternatives)
{ after(grammarAccess.getExprAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExprSimple
entryRuleExprSimple 
:
{ before(grammarAccess.getExprSimpleRule()); }
	 ruleExprSimple
{ after(grammarAccess.getExprSimpleRule()); } 
	 EOF 
;

// Rule ExprSimple
ruleExprSimple
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExprSimpleAccess().getAlternatives()); }
(rule__ExprSimple__Alternatives)
{ after(grammarAccess.getExprSimpleAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLExpr
entryRuleLExpr 
:
{ before(grammarAccess.getLExprRule()); }
	 ruleLExpr
{ after(grammarAccess.getLExprRule()); } 
	 EOF 
;

// Rule LExpr
ruleLExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getLExprAccess().getGroup()); }
(rule__LExpr__Group__0)
{ after(grammarAccess.getLExprAccess().getGroup()); }
)
(
{ before(grammarAccess.getLExprAccess().getGroup()); }
(rule__LExpr__Group__0)*
{ after(grammarAccess.getLExprAccess().getGroup()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExprAnd
entryRuleExprAnd 
:
{ before(grammarAccess.getExprAndRule()); }
	 ruleExprAnd
{ after(grammarAccess.getExprAndRule()); } 
	 EOF 
;

// Rule ExprAnd
ruleExprAnd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExprAndAccess().getGroup()); }
(rule__ExprAnd__Group__0)
{ after(grammarAccess.getExprAndAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExprOr
entryRuleExprOr 
:
{ before(grammarAccess.getExprOrRule()); }
	 ruleExprOr
{ after(grammarAccess.getExprOrRule()); } 
	 EOF 
;

// Rule ExprOr
ruleExprOr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExprOrAccess().getGroup()); }
(rule__ExprOr__Group__0)
{ after(grammarAccess.getExprOrAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExprNot
entryRuleExprNot 
:
{ before(grammarAccess.getExprNotRule()); }
	 ruleExprNot
{ after(grammarAccess.getExprNotRule()); } 
	 EOF 
;

// Rule ExprNot
ruleExprNot
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExprNotAccess().getAlternatives()); }
(rule__ExprNot__Alternatives)
{ after(grammarAccess.getExprNotAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExprEq
entryRuleExprEq 
:
{ before(grammarAccess.getExprEqRule()); }
	 ruleExprEq
{ after(grammarAccess.getExprEqRule()); } 
	 EOF 
;

// Rule ExprEq
ruleExprEq
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExprEqAccess().getAlternatives()); }
(rule__ExprEq__Alternatives)
{ after(grammarAccess.getExprEqAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVAR
entryRuleVAR 
:
{ before(grammarAccess.getVARRule()); }
	 ruleVAR
{ after(grammarAccess.getVARRule()); } 
	 EOF 
;

// Rule VAR
ruleVAR
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVARAccess().getGroup()); }
(rule__VAR__Group__0)
{ after(grammarAccess.getVARAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSYMB
entryRuleSYMB 
:
{ before(grammarAccess.getSYMBRule()); }
	 ruleSYMB
{ after(grammarAccess.getSYMBRule()); } 
	 EOF 
;

// Rule SYMB
ruleSYMB
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSYMBAccess().getGroup()); }
(rule__SYMB__Group__0)
{ after(grammarAccess.getSYMBAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLC
entryRuleLC 
:
{ before(grammarAccess.getLCRule()); }
	 ruleLC
{ after(grammarAccess.getLCRule()); } 
	 EOF 
;

// Rule LC
ruleLC
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLCAccess().getLCsParserRuleCall()); }
(	ruleLCs)?
{ after(grammarAccess.getLCAccess().getLCsParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLCs
entryRuleLCs 
:
{ before(grammarAccess.getLCsRule()); }
	 ruleLCs
{ after(grammarAccess.getLCsRule()); } 
	 EOF 
;

// Rule LCs
ruleLCs
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLCsAccess().getAlternatives()); }
(rule__LCs__Alternatives)
{ after(grammarAccess.getLCsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Command__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getNopAssignment_0()); }
(rule__Command__NopAssignment_0)
{ after(grammarAccess.getCommandAccess().getNopAssignment_0()); }
)

    |(
{ before(grammarAccess.getCommandAccess().getAssignAssignment_1()); }
(rule__Command__AssignAssignment_1)
{ after(grammarAccess.getCommandAccess().getAssignAssignment_1()); }
)

    |(
{ before(grammarAccess.getCommandAccess().getWhAssignment_2()); }
(rule__Command__WhAssignment_2)
{ after(grammarAccess.getCommandAccess().getWhAssignment_2()); }
)

    |(
{ before(grammarAccess.getCommandAccess().getForAssignment_3()); }
(rule__Command__ForAssignment_3)
{ after(grammarAccess.getCommandAccess().getForAssignment_3()); }
)

    |(
{ before(grammarAccess.getCommandAccess().getIfAssignment_4()); }
(rule__Command__IfAssignment_4)
{ after(grammarAccess.getCommandAccess().getIfAssignment_4()); }
)

    |(
{ before(grammarAccess.getCommandAccess().getForeAssignment_5()); }
(rule__Command__ForeAssignment_5)
{ after(grammarAccess.getCommandAccess().getForeAssignment_5()); }
)

    |(
{ before(grammarAccess.getCommandAccess().getIfcAssignment_6()); }
(rule__Command__IfcAssignment_6)
{ after(grammarAccess.getCommandAccess().getIfcAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getExsAssignment_0()); }
(rule__Expr__ExsAssignment_0)
{ after(grammarAccess.getExprAccess().getExsAssignment_0()); }
)

    |(
{ before(grammarAccess.getExprAccess().getExaAssignment_1()); }
(rule__Expr__ExaAssignment_1)
{ after(grammarAccess.getExprAccess().getExaAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getNilAssignment_0()); }
(rule__ExprSimple__NilAssignment_0)
{ after(grammarAccess.getExprSimpleAccess().getNilAssignment_0()); }
)

    |(
{ before(grammarAccess.getExprSimpleAccess().getVAssignment_1()); }
(rule__ExprSimple__VAssignment_1)
{ after(grammarAccess.getExprSimpleAccess().getVAssignment_1()); }
)

    |(
{ before(grammarAccess.getExprSimpleAccess().getSymAssignment_2()); }
(rule__ExprSimple__SymAssignment_2)
{ after(grammarAccess.getExprSimpleAccess().getSymAssignment_2()); }
)

    |(
{ before(grammarAccess.getExprSimpleAccess().getGroup_3()); }
(rule__ExprSimple__Group_3__0)
{ after(grammarAccess.getExprSimpleAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getExprSimpleAccess().getGroup_4()); }
(rule__ExprSimple__Group_4__0)
{ after(grammarAccess.getExprSimpleAccess().getGroup_4()); }
)

    |(
{ before(grammarAccess.getExprSimpleAccess().getGroup_5()); }
(rule__ExprSimple__Group_5__0)
{ after(grammarAccess.getExprSimpleAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__MotAlternatives_3_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getMotConsKeyword_3_1_0_0()); }

	'cons' 

{ after(grammarAccess.getExprSimpleAccess().getMotConsKeyword_3_1_0_0()); }
)

    |(
{ before(grammarAccess.getExprSimpleAccess().getMotListKeyword_3_1_0_1()); }

	'list' 

{ after(grammarAccess.getExprSimpleAccess().getMotListKeyword_3_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__MotAlternatives_4_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getMotHdKeyword_4_1_0_0()); }

	'hd' 

{ after(grammarAccess.getExprSimpleAccess().getMotHdKeyword_4_1_0_0()); }
)

    |(
{ before(grammarAccess.getExprSimpleAccess().getMotTlKeyword_4_1_0_1()); }

	'tl' 

{ after(grammarAccess.getExprSimpleAccess().getMotTlKeyword_4_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprNot__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprNotAccess().getGroup_0()); }
(rule__ExprNot__Group_0__0)
{ after(grammarAccess.getExprNotAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getExprNotAccess().getExQ2Assignment_1()); }
(rule__ExprNot__ExQ2Assignment_1)
{ after(grammarAccess.getExprNotAccess().getExQ2Assignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprEqAccess().getGroup_0()); }
(rule__ExprEq__Group_0__0)
{ after(grammarAccess.getExprEqAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getExprEqAccess().getGroup_1()); }
(rule__ExprEq__Group_1__0)
{ after(grammarAccess.getExprEqAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LCs__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLCsAccess().getSPTerminalRuleCall_0()); }
	RULE_SP
{ after(grammarAccess.getLCsAccess().getSPTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLCsAccess().getCRTerminalRuleCall_1()); }
	RULE_CR
{ after(grammarAccess.getLCsAccess().getCRTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLCsAccess().getTABTerminalRuleCall_2()); }
	RULE_TAB
{ after(grammarAccess.getLCsAccess().getTABTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getLCsAccess().getLFTerminalRuleCall_3()); }
	RULE_LF
{ after(grammarAccess.getLCsAccess().getLFTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getProgAssignment_0()); }
(rule__Model__ProgAssignment_0)
{ after(grammarAccess.getModelAccess().getProgAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getLCParserRuleCall_1()); }
(	ruleLC)?
{ after(grammarAccess.getModelAccess().getLCParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Function__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getFunctionKeyword_0()); }

	'function' 

{ after(grammarAccess.getFunctionAccess().getFunctionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getLCParserRuleCall_1()); }
	ruleLC
{ after(grammarAccess.getFunctionAccess().getLCParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNameAssignment_2()); }
(rule__Function__NameAssignment_2)
{ after(grammarAccess.getFunctionAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__3__Impl
	rule__Function__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getColonKeyword_3()); }

	':' 

{ after(grammarAccess.getFunctionAccess().getColonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__4__Impl
	rule__Function__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getLCParserRuleCall_4()); }
	ruleLC
{ after(grammarAccess.getFunctionAccess().getLCParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getDefAssignment_5()); }
(rule__Function__DefAssignment_5)
{ after(grammarAccess.getFunctionAccess().getDefAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Definition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group__0__Impl
	rule__Definition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getReadKeyword_0()); }

	'read' 

{ after(grammarAccess.getDefinitionAccess().getReadKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group__1__Impl
	rule__Definition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getLCParserRuleCall_1()); }
	ruleLC
{ after(grammarAccess.getDefinitionAccess().getLCParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group__2__Impl
	rule__Definition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getInAssignment_2()); }
(rule__Definition__InAssignment_2)
{ after(grammarAccess.getDefinitionAccess().getInAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group__3__Impl
	rule__Definition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getLCParserRuleCall_3()); }
	ruleLC
{ after(grammarAccess.getDefinitionAccess().getLCParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group__4__Impl
	rule__Definition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getPercentSignKeyword_4()); }

	'%' 

{ after(grammarAccess.getDefinitionAccess().getPercentSignKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group__5__Impl
	rule__Definition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getComAssignment_5()); }
(rule__Definition__ComAssignment_5)
{ after(grammarAccess.getDefinitionAccess().getComAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group__6__Impl
	rule__Definition__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getLCParserRuleCall_6()); }
	ruleLC
{ after(grammarAccess.getDefinitionAccess().getLCParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group__7__Impl
	rule__Definition__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getPercentSignKeyword_7()); }

	'%' 

{ after(grammarAccess.getDefinitionAccess().getPercentSignKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group__8__Impl
	rule__Definition__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getWriteKeyword_8()); }

	'write' 

{ after(grammarAccess.getDefinitionAccess().getWriteKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group__9__Impl
	rule__Definition__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getLCParserRuleCall_9()); }
	ruleLC
{ after(grammarAccess.getDefinitionAccess().getLCParserRuleCall_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Definition__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getOutAssignment_10()); }
(rule__Definition__OutAssignment_10)
{ after(grammarAccess.getDefinitionAccess().getOutAssignment_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}
























rule__Input__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__0__Impl
	rule__Input__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getVAssignment_0()); }
(rule__Input__VAssignment_0)
{ after(grammarAccess.getInputAccess().getVAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getGroup_1()); }
(rule__Input__Group_1__0)*
{ after(grammarAccess.getInputAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Input__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group_1__0__Impl
	rule__Input__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getInputAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getVAssignment_1_1()); }
(rule__Input__VAssignment_1_1)
{ after(grammarAccess.getInputAccess().getVAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Output__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Output__Group__0__Impl
	rule__Output__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputAccess().getVAssignment_0()); }
(rule__Output__VAssignment_0)
{ after(grammarAccess.getOutputAccess().getVAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Output__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Output__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputAccess().getGroup_1()); }
(rule__Output__Group_1__0)*
{ after(grammarAccess.getOutputAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Output__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Output__Group_1__0__Impl
	rule__Output__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getOutputAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Output__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Output__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputAccess().getVAssignment_1_1()); }
(rule__Output__VAssignment_1_1)
{ after(grammarAccess.getOutputAccess().getVAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Commands__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Commands__Group__0__Impl
	rule__Commands__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandsAccess().getCAssignment_0()); }
(rule__Commands__CAssignment_0)
{ after(grammarAccess.getCommandsAccess().getCAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Commands__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Commands__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandsAccess().getGroup_1()); }
(rule__Commands__Group_1__0)*
{ after(grammarAccess.getCommandsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Commands__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Commands__Group_1__0__Impl
	rule__Commands__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandsAccess().getSemicolonKeyword_1_0()); }

	';' 

{ after(grammarAccess.getCommandsAccess().getSemicolonKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Commands__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Commands__Group_1__1__Impl
	rule__Commands__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandsAccess().getLCParserRuleCall_1_1()); }
	ruleLC
{ after(grammarAccess.getCommandsAccess().getLCParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Commands__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Commands__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandsAccess().getCAssignment_1_2()); }
(rule__Commands__CAssignment_1_2)
{ after(grammarAccess.getCommandsAccess().getCAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Assign__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assign__Group__0__Impl
	rule__Assign__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignAccess().getVsAssignment_0()); }
(rule__Assign__VsAssignment_0)
{ after(grammarAccess.getAssignAccess().getVsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assign__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assign__Group__1__Impl
	rule__Assign__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignAccess().getLCParserRuleCall_1()); }
	ruleLC
{ after(grammarAccess.getAssignAccess().getLCParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assign__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assign__Group__2__Impl
	rule__Assign__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignAccess().getColonEqualsSignKeyword_2()); }

	':=' 

{ after(grammarAccess.getAssignAccess().getColonEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assign__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assign__Group__3__Impl
	rule__Assign__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignAccess().getLCParserRuleCall_3()); }
	ruleLC
{ after(grammarAccess.getAssignAccess().getLCParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assign__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assign__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignAccess().getExAssignment_4()); }
(rule__Assign__ExAssignment_4)
{ after(grammarAccess.getAssignAccess().getExAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__While__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__0__Impl
	rule__While__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getWhileKeyword_0()); }

	'while' 

{ after(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__1__Impl
	rule__While__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getLCParserRuleCall_1()); }
	ruleLC
{ after(grammarAccess.getWhileAccess().getLCParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__2__Impl
	rule__While__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getExAssignment_2()); }
(rule__While__ExAssignment_2)
{ after(grammarAccess.getWhileAccess().getExAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__3__Impl
	rule__While__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getLCParserRuleCall_3()); }
	ruleLC
{ after(grammarAccess.getWhileAccess().getLCParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__4__Impl
	rule__While__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getDoKeyword_4()); }

	'do' 

{ after(grammarAccess.getWhileAccess().getDoKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__5__Impl
	rule__While__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getLCParserRuleCall_5()); }
	ruleLC
{ after(grammarAccess.getWhileAccess().getLCParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__6__Impl
	rule__While__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getCAssignment_6()); }
(rule__While__CAssignment_6)
{ after(grammarAccess.getWhileAccess().getCAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__7__Impl
	rule__While__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getLCParserRuleCall_7()); }
	ruleLC
{ after(grammarAccess.getWhileAccess().getLCParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getOdKeyword_8()); }

	'od' 

{ after(grammarAccess.getWhileAccess().getOdKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__For__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__0__Impl
	rule__For__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getForKeyword_0()); }

	'for' 

{ after(grammarAccess.getForAccess().getForKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__1__Impl
	rule__For__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getLCParserRuleCall_1()); }
	ruleLC
{ after(grammarAccess.getForAccess().getLCParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__2__Impl
	rule__For__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getExAssignment_2()); }
(rule__For__ExAssignment_2)
{ after(grammarAccess.getForAccess().getExAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__3__Impl
	rule__For__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getLCParserRuleCall_3()); }
	ruleLC
{ after(grammarAccess.getForAccess().getLCParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__4__Impl
	rule__For__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getDoKeyword_4()); }

	'do' 

{ after(grammarAccess.getForAccess().getDoKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__5__Impl
	rule__For__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getLCParserRuleCall_5()); }
	ruleLC
{ after(grammarAccess.getForAccess().getLCParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__6__Impl
	rule__For__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getCAssignment_6()); }
(rule__For__CAssignment_6)
{ after(grammarAccess.getForAccess().getCAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__7__Impl
	rule__For__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getLCParserRuleCall_7()); }
	ruleLC
{ after(grammarAccess.getForAccess().getLCParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getOdKeyword_8()); }

	'od' 

{ after(grammarAccess.getForAccess().getOdKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__If__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__0__Impl
	rule__If__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getIfAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__1__Impl
	rule__If__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getLCParserRuleCall_1()); }
	ruleLC
{ after(grammarAccess.getIfAccess().getLCParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__2__Impl
	rule__If__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getExAssignment_2()); }
(rule__If__ExAssignment_2)
{ after(grammarAccess.getIfAccess().getExAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__3__Impl
	rule__If__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getLCParserRuleCall_3()); }
	ruleLC
{ after(grammarAccess.getIfAccess().getLCParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__4__Impl
	rule__If__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getThenKeyword_4()); }

	'then' 

{ after(grammarAccess.getIfAccess().getThenKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__5__Impl
	rule__If__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getLCParserRuleCall_5()); }
	ruleLC
{ after(grammarAccess.getIfAccess().getLCParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__6__Impl
	rule__If__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getCtAssignment_6()); }
(rule__If__CtAssignment_6)
{ after(grammarAccess.getIfAccess().getCtAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__7__Impl
	rule__If__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getLCParserRuleCall_7()); }
	ruleLC
{ after(grammarAccess.getIfAccess().getLCParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__8__Impl
	rule__If__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getElseKeyword_8()); }

	'else' 

{ after(grammarAccess.getIfAccess().getElseKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__9__Impl
	rule__If__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getLCParserRuleCall_9()); }
	ruleLC
{ after(grammarAccess.getIfAccess().getLCParserRuleCall_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__10__Impl
	rule__If__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getCeAssignment_10()); }
(rule__If__CeAssignment_10)
{ after(grammarAccess.getIfAccess().getCeAssignment_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__11__Impl
	rule__If__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getLCParserRuleCall_11()); }
	ruleLC
{ after(grammarAccess.getIfAccess().getLCParserRuleCall_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__12
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__12__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__12__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getFiKeyword_12()); }

	'fi' 

{ after(grammarAccess.getIfAccess().getFiKeyword_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}




























rule__Foreach__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__0__Impl
	rule__Foreach__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getForeachKeyword_0()); }

	'foreach' 

{ after(grammarAccess.getForeachAccess().getForeachKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__1__Impl
	rule__Foreach__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getLCParserRuleCall_1()); }
	ruleLC
{ after(grammarAccess.getForeachAccess().getLCParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__2__Impl
	rule__Foreach__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getEx1Assignment_2()); }
(rule__Foreach__Ex1Assignment_2)
{ after(grammarAccess.getForeachAccess().getEx1Assignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__3__Impl
	rule__Foreach__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getLCParserRuleCall_3()); }
	ruleLC
{ after(grammarAccess.getForeachAccess().getLCParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__4__Impl
	rule__Foreach__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getInKeyword_4()); }

	'in' 

{ after(grammarAccess.getForeachAccess().getInKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__5__Impl
	rule__Foreach__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getLCParserRuleCall_5()); }
	ruleLC
{ after(grammarAccess.getForeachAccess().getLCParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__6__Impl
	rule__Foreach__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getEx2Assignment_6()); }
(rule__Foreach__Ex2Assignment_6)
{ after(grammarAccess.getForeachAccess().getEx2Assignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__7__Impl
	rule__Foreach__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getLCParserRuleCall_7()); }
	ruleLC
{ after(grammarAccess.getForeachAccess().getLCParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__8__Impl
	rule__Foreach__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getDoKeyword_8()); }

	'do' 

{ after(grammarAccess.getForeachAccess().getDoKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__9__Impl
	rule__Foreach__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getLCParserRuleCall_9()); }
	ruleLC
{ after(grammarAccess.getForeachAccess().getLCParserRuleCall_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__10__Impl
	rule__Foreach__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getCAssignment_10()); }
(rule__Foreach__CAssignment_10)
{ after(grammarAccess.getForeachAccess().getCAssignment_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__11__Impl
	rule__Foreach__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getLCParserRuleCall_11()); }
	ruleLC
{ after(grammarAccess.getForeachAccess().getLCParserRuleCall_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__12
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Foreach__Group__12__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__12__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getOdKeyword_12()); }

	'od' 

{ after(grammarAccess.getForeachAccess().getOdKeyword_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}




























rule__Ifconfort__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ifconfort__Group__0__Impl
	rule__Ifconfort__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifconfort__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfconfortAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getIfconfortAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ifconfort__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ifconfort__Group__1__Impl
	rule__Ifconfort__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifconfort__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfconfortAccess().getLCParserRuleCall_1()); }
	ruleLC
{ after(grammarAccess.getIfconfortAccess().getLCParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ifconfort__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ifconfort__Group__2__Impl
	rule__Ifconfort__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifconfort__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfconfortAccess().getExAssignment_2()); }
(rule__Ifconfort__ExAssignment_2)
{ after(grammarAccess.getIfconfortAccess().getExAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ifconfort__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ifconfort__Group__3__Impl
	rule__Ifconfort__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifconfort__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfconfortAccess().getLCParserRuleCall_3()); }
	ruleLC
{ after(grammarAccess.getIfconfortAccess().getLCParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ifconfort__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ifconfort__Group__4__Impl
	rule__Ifconfort__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifconfort__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfconfortAccess().getThenKeyword_4()); }

	'then' 

{ after(grammarAccess.getIfconfortAccess().getThenKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ifconfort__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ifconfort__Group__5__Impl
	rule__Ifconfort__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifconfort__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfconfortAccess().getLCParserRuleCall_5()); }
	ruleLC
{ after(grammarAccess.getIfconfortAccess().getLCParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ifconfort__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ifconfort__Group__6__Impl
	rule__Ifconfort__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifconfort__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfconfortAccess().getCAssignment_6()); }
(rule__Ifconfort__CAssignment_6)
{ after(grammarAccess.getIfconfortAccess().getCAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ifconfort__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ifconfort__Group__7__Impl
	rule__Ifconfort__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifconfort__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfconfortAccess().getLCParserRuleCall_7()); }
	ruleLC
{ after(grammarAccess.getIfconfortAccess().getLCParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ifconfort__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ifconfort__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifconfort__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfconfortAccess().getFiKeyword_8()); }

	'fi' 

{ after(grammarAccess.getIfconfortAccess().getFiKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__Vars__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vars__Group__0__Impl
	rule__Vars__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarsAccess().getVsAssignment_0()); }
(rule__Vars__VsAssignment_0)
{ after(grammarAccess.getVarsAccess().getVsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vars__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vars__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarsAccess().getGroup_1()); }
(rule__Vars__Group_1__0)*
{ after(grammarAccess.getVarsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Vars__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vars__Group_1__0__Impl
	rule__Vars__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarsAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getVarsAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vars__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vars__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarsAccess().getVsAssignment_1_1()); }
(rule__Vars__VsAssignment_1_1)
{ after(grammarAccess.getVarsAccess().getVsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Exprs__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exprs__Group__0__Impl
	rule__Exprs__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprsAccess().getExAssignment_0()); }
(rule__Exprs__ExAssignment_0)
{ after(grammarAccess.getExprsAccess().getExAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exprs__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exprs__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprsAccess().getGroup_1()); }
(rule__Exprs__Group_1__0)*
{ after(grammarAccess.getExprsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Exprs__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exprs__Group_1__0__Impl
	rule__Exprs__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprsAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getExprsAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exprs__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exprs__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprsAccess().getExAssignment_1_1()); }
(rule__Exprs__ExAssignment_1_1)
{ after(grammarAccess.getExprsAccess().getExAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExprSimple__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprSimple__Group_3__0__Impl
	rule__ExprSimple__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_3_0()); }

	'(' 

{ after(grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprSimple__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprSimple__Group_3__1__Impl
	rule__ExprSimple__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getMotAssignment_3_1()); }
(rule__ExprSimple__MotAssignment_3_1)
{ after(grammarAccess.getExprSimpleAccess().getMotAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprSimple__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprSimple__Group_3__2__Impl
	rule__ExprSimple__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getLexAssignment_3_2()); }
(rule__ExprSimple__LexAssignment_3_2)
{ after(grammarAccess.getExprSimpleAccess().getLexAssignment_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprSimple__Group_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprSimple__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_3_3()); }

	')' 

{ after(grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ExprSimple__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprSimple__Group_4__0__Impl
	rule__ExprSimple__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_4_0()); }

	'(' 

{ after(grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprSimple__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprSimple__Group_4__1__Impl
	rule__ExprSimple__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getMotAssignment_4_1()); }
(rule__ExprSimple__MotAssignment_4_1)
{ after(grammarAccess.getExprSimpleAccess().getMotAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprSimple__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprSimple__Group_4__2__Impl
	rule__ExprSimple__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getLCParserRuleCall_4_2()); }
	ruleLC
{ after(grammarAccess.getExprSimpleAccess().getLCParserRuleCall_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprSimple__Group_4__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprSimple__Group_4__3__Impl
	rule__ExprSimple__Group_4__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_4__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getExAssignment_4_3()); }
(rule__ExprSimple__ExAssignment_4_3)
{ after(grammarAccess.getExprSimpleAccess().getExAssignment_4_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprSimple__Group_4__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprSimple__Group_4__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_4__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_4_4()); }

	')' 

{ after(grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_4_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ExprSimple__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprSimple__Group_5__0__Impl
	rule__ExprSimple__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_5_0()); }

	'(' 

{ after(grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprSimple__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprSimple__Group_5__1__Impl
	rule__ExprSimple__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getSymAssignment_5_1()); }
(rule__ExprSimple__SymAssignment_5_1)
{ after(grammarAccess.getExprSimpleAccess().getSymAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprSimple__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprSimple__Group_5__2__Impl
	rule__ExprSimple__Group_5__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_5__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getLexAssignment_5_2()); }
(rule__ExprSimple__LexAssignment_5_2)
{ after(grammarAccess.getExprSimpleAccess().getLexAssignment_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprSimple__Group_5__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprSimple__Group_5__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_5__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_5_3()); }

	')' 

{ after(grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_5_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__LExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LExpr__Group__0__Impl
	rule__LExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLExprAccess().getLCParserRuleCall_0()); }
	ruleLC
{ after(grammarAccess.getLExprAccess().getLCParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLExprAccess().getEAssignment_1()); }
(rule__LExpr__EAssignment_1)
{ after(grammarAccess.getLExprAccess().getEAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExprAnd__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprAnd__Group__0__Impl
	rule__ExprAnd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAndAccess().getExo1Assignment_0()); }
(rule__ExprAnd__Exo1Assignment_0)
{ after(grammarAccess.getExprAndAccess().getExo1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprAnd__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprAnd__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAndAccess().getGroup_1()); }
(rule__ExprAnd__Group_1__0)*
{ after(grammarAccess.getExprAndAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExprAnd__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprAnd__Group_1__0__Impl
	rule__ExprAnd__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAndAccess().getLCParserRuleCall_1_0()); }
	ruleLC
{ after(grammarAccess.getExprAndAccess().getLCParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprAnd__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprAnd__Group_1__1__Impl
	rule__ExprAnd__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAndAccess().getAndKeyword_1_1()); }

	'and' 

{ after(grammarAccess.getExprAndAccess().getAndKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprAnd__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprAnd__Group_1__2__Impl
	rule__ExprAnd__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAndAccess().getLCParserRuleCall_1_2()); }
	ruleLC
{ after(grammarAccess.getExprAndAccess().getLCParserRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprAnd__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprAnd__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAndAccess().getExo2Assignment_1_3()); }
(rule__ExprAnd__Exo2Assignment_1_3)
{ after(grammarAccess.getExprAndAccess().getExo2Assignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ExprOr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprOr__Group__0__Impl
	rule__ExprOr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprOrAccess().getExn1Assignment_0()); }
(rule__ExprOr__Exn1Assignment_0)
{ after(grammarAccess.getExprOrAccess().getExn1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprOr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprOr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprOrAccess().getGroup_1()); }
(rule__ExprOr__Group_1__0)*
{ after(grammarAccess.getExprOrAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExprOr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprOr__Group_1__0__Impl
	rule__ExprOr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprOrAccess().getLCParserRuleCall_1_0()); }
	ruleLC
{ after(grammarAccess.getExprOrAccess().getLCParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprOr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprOr__Group_1__1__Impl
	rule__ExprOr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprOrAccess().getOrKeyword_1_1()); }

	'or' 

{ after(grammarAccess.getExprOrAccess().getOrKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprOr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprOr__Group_1__2__Impl
	rule__ExprOr__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprOrAccess().getLCParserRuleCall_1_2()); }
	ruleLC
{ after(grammarAccess.getExprOrAccess().getLCParserRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprOr__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprOr__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprOrAccess().getExn2Assignment_1_3()); }
(rule__ExprOr__Exn2Assignment_1_3)
{ after(grammarAccess.getExprOrAccess().getExn2Assignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ExprNot__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprNot__Group_0__0__Impl
	rule__ExprNot__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprNot__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprNotAccess().getNotKeyword_0_0()); }

	'not' 

{ after(grammarAccess.getExprNotAccess().getNotKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprNot__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprNot__Group_0__1__Impl
	rule__ExprNot__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprNot__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprNotAccess().getLCParserRuleCall_0_1()); }
	ruleLC
{ after(grammarAccess.getExprNotAccess().getLCParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprNot__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprNot__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprNot__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprNotAccess().getExQ1Assignment_0_2()); }
(rule__ExprNot__ExQ1Assignment_0_2)
{ after(grammarAccess.getExprNotAccess().getExQ1Assignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExprEq__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprEq__Group_0__0__Impl
	rule__ExprEq__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprEqAccess().getLeftParenthesisKeyword_0_0()); }

	'(' 

{ after(grammarAccess.getExprEqAccess().getLeftParenthesisKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprEq__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprEq__Group_0__1__Impl
	rule__ExprEq__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprEqAccess().getExS1Assignment_0_1()); }
(rule__ExprEq__ExS1Assignment_0_1)
{ after(grammarAccess.getExprEqAccess().getExS1Assignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprEq__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprEq__Group_0__2__Impl
	rule__ExprEq__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprEqAccess().getEqualsSignQuestionMarkKeyword_0_2()); }

	'=?' 

{ after(grammarAccess.getExprEqAccess().getEqualsSignQuestionMarkKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprEq__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprEq__Group_0__3__Impl
	rule__ExprEq__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprEqAccess().getExS2Assignment_0_3()); }
(rule__ExprEq__ExS2Assignment_0_3)
{ after(grammarAccess.getExprEqAccess().getExS2Assignment_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprEq__Group_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprEq__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprEqAccess().getRightParenthesisKeyword_0_4()); }

	')' 

{ after(grammarAccess.getExprEqAccess().getRightParenthesisKeyword_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ExprEq__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprEq__Group_1__0__Impl
	rule__ExprEq__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprEqAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getExprEqAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprEq__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprEq__Group_1__1__Impl
	rule__ExprEq__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprEqAccess().getExAssignment_1_1()); }
(rule__ExprEq__ExAssignment_1_1)
{ after(grammarAccess.getExprEqAccess().getExAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExprEq__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExprEq__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprEqAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getExprEqAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VAR__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VAR__Group__0__Impl
	rule__VAR__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VAR__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVARAccess().getBvAssignment_0()); }
(rule__VAR__BvAssignment_0)
{ after(grammarAccess.getVARAccess().getBvAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VAR__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VAR__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VAR__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVARAccess().getCfAssignment_1()); }
(rule__VAR__CfAssignment_1)
{ after(grammarAccess.getVARAccess().getCfAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SYMB__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SYMB__Group__0__Impl
	rule__SYMB__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SYMB__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSYMBAccess().getBsAssignment_0()); }
(rule__SYMB__BsAssignment_0)
{ after(grammarAccess.getSYMBAccess().getBsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SYMB__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SYMB__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SYMB__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSYMBAccess().getCfAssignment_1()); }
(rule__SYMB__CfAssignment_1)
{ after(grammarAccess.getSYMBAccess().getCfAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__ProgAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getProgFunctionParserRuleCall_0_0()); }
	ruleFunction{ after(grammarAccess.getModelAccess().getProgFunctionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNameSYMBParserRuleCall_2_0()); }
	ruleSYMB{ after(grammarAccess.getFunctionAccess().getNameSYMBParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__DefAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getDefDefinitionParserRuleCall_5_0()); }
	ruleDefinition{ after(grammarAccess.getFunctionAccess().getDefDefinitionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__InAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getInInputParserRuleCall_2_0()); }
	ruleInput{ after(grammarAccess.getDefinitionAccess().getInInputParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__ComAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getComCommandsParserRuleCall_5_0()); }
	ruleCommands{ after(grammarAccess.getDefinitionAccess().getComCommandsParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__OutAssignment_10
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getOutOutputParserRuleCall_10_0()); }
	ruleOutput{ after(grammarAccess.getDefinitionAccess().getOutOutputParserRuleCall_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Input__VAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getVVARParserRuleCall_0_0()); }
	ruleVAR{ after(grammarAccess.getInputAccess().getVVARParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Input__VAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getVVARParserRuleCall_1_1_0()); }
	ruleVAR{ after(grammarAccess.getInputAccess().getVVARParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Output__VAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputAccess().getVVARParserRuleCall_0_0()); }
	ruleVAR{ after(grammarAccess.getOutputAccess().getVVARParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Output__VAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputAccess().getVVARParserRuleCall_1_1_0()); }
	ruleVAR{ after(grammarAccess.getOutputAccess().getVVARParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__CAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandsAccess().getCCommandParserRuleCall_0_0()); }
	ruleCommand{ after(grammarAccess.getCommandsAccess().getCCommandParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__CAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandsAccess().getCCommandParserRuleCall_1_2_0()); }
	ruleCommand{ after(grammarAccess.getCommandsAccess().getCCommandParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Command__NopAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getNopNopKeyword_0_0()); }
(
{ before(grammarAccess.getCommandAccess().getNopNopKeyword_0_0()); }

	'nop' 

{ after(grammarAccess.getCommandAccess().getNopNopKeyword_0_0()); }
)

{ after(grammarAccess.getCommandAccess().getNopNopKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Command__AssignAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getAssignAssignParserRuleCall_1_0()); }
	ruleAssign{ after(grammarAccess.getCommandAccess().getAssignAssignParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Command__WhAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getWhWhileParserRuleCall_2_0()); }
	ruleWhile{ after(grammarAccess.getCommandAccess().getWhWhileParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Command__ForAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getForForParserRuleCall_3_0()); }
	ruleFor{ after(grammarAccess.getCommandAccess().getForForParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Command__IfAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getIfIfParserRuleCall_4_0()); }
	ruleIf{ after(grammarAccess.getCommandAccess().getIfIfParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Command__ForeAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getForeForeachParserRuleCall_5_0()); }
	ruleForeach{ after(grammarAccess.getCommandAccess().getForeForeachParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Command__IfcAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getIfcIfconfortParserRuleCall_6_0()); }
	ruleIfconfort{ after(grammarAccess.getCommandAccess().getIfcIfconfortParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__VsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignAccess().getVsVarsParserRuleCall_0_0()); }
	ruleVars{ after(grammarAccess.getAssignAccess().getVsVarsParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__ExAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignAccess().getExExprsParserRuleCall_4_0()); }
	ruleExprs{ after(grammarAccess.getAssignAccess().getExExprsParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__While__ExAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getExExprParserRuleCall_2_0()); }
	ruleExpr{ after(grammarAccess.getWhileAccess().getExExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__While__CAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getCCommandsParserRuleCall_6_0()); }
	ruleCommands{ after(grammarAccess.getWhileAccess().getCCommandsParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__For__ExAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getExExprParserRuleCall_2_0()); }
	ruleExpr{ after(grammarAccess.getForAccess().getExExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__For__CAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getCCommandsParserRuleCall_6_0()); }
	ruleCommands{ after(grammarAccess.getForAccess().getCCommandsParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If__ExAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getExExprParserRuleCall_2_0()); }
	ruleExpr{ after(grammarAccess.getIfAccess().getExExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If__CtAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getCtCommandsParserRuleCall_6_0()); }
	ruleCommands{ after(grammarAccess.getIfAccess().getCtCommandsParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If__CeAssignment_10
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getCeCommandsParserRuleCall_10_0()); }
	ruleCommands{ after(grammarAccess.getIfAccess().getCeCommandsParserRuleCall_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Ex1Assignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getEx1ExprParserRuleCall_2_0()); }
	ruleExpr{ after(grammarAccess.getForeachAccess().getEx1ExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Ex2Assignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getEx2ExprParserRuleCall_6_0()); }
	ruleExpr{ after(grammarAccess.getForeachAccess().getEx2ExprParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__CAssignment_10
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForeachAccess().getCCommandsParserRuleCall_10_0()); }
	ruleCommands{ after(grammarAccess.getForeachAccess().getCCommandsParserRuleCall_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Ifconfort__ExAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfconfortAccess().getExExprParserRuleCall_2_0()); }
	ruleExpr{ after(grammarAccess.getIfconfortAccess().getExExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Ifconfort__CAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfconfortAccess().getCCommandsParserRuleCall_6_0()); }
	ruleCommands{ after(grammarAccess.getIfconfortAccess().getCCommandsParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__VsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarsAccess().getVsVARParserRuleCall_0_0()); }
	ruleVAR{ after(grammarAccess.getVarsAccess().getVsVARParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__VsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarsAccess().getVsVARParserRuleCall_1_1_0()); }
	ruleVAR{ after(grammarAccess.getVarsAccess().getVsVARParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__ExAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprsAccess().getExExprParserRuleCall_0_0()); }
	ruleExpr{ after(grammarAccess.getExprsAccess().getExExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__ExAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprsAccess().getExExprParserRuleCall_1_1_0()); }
	ruleExpr{ after(grammarAccess.getExprsAccess().getExExprParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__ExsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getExsExprSimpleParserRuleCall_0_0()); }
	ruleExprSimple{ after(grammarAccess.getExprAccess().getExsExprSimpleParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__ExaAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getExaExprAndParserRuleCall_1_0()); }
	ruleExprAnd{ after(grammarAccess.getExprAccess().getExaExprAndParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__NilAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getNilNilKeyword_0_0()); }
(
{ before(grammarAccess.getExprSimpleAccess().getNilNilKeyword_0_0()); }

	'nil' 

{ after(grammarAccess.getExprSimpleAccess().getNilNilKeyword_0_0()); }
)

{ after(grammarAccess.getExprSimpleAccess().getNilNilKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__VAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getVVARParserRuleCall_1_0()); }
	ruleVAR{ after(grammarAccess.getExprSimpleAccess().getVVARParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__SymAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getSymSYMBParserRuleCall_2_0()); }
	ruleSYMB{ after(grammarAccess.getExprSimpleAccess().getSymSYMBParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__MotAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getMotAlternatives_3_1_0()); }
(rule__ExprSimple__MotAlternatives_3_1_0)
{ after(grammarAccess.getExprSimpleAccess().getMotAlternatives_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__LexAssignment_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getLexLExprParserRuleCall_3_2_0()); }
	ruleLExpr{ after(grammarAccess.getExprSimpleAccess().getLexLExprParserRuleCall_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__MotAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getMotAlternatives_4_1_0()); }
(rule__ExprSimple__MotAlternatives_4_1_0)
{ after(grammarAccess.getExprSimpleAccess().getMotAlternatives_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__ExAssignment_4_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getExExprParserRuleCall_4_3_0()); }
	ruleExpr{ after(grammarAccess.getExprSimpleAccess().getExExprParserRuleCall_4_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__SymAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getSymSYMBParserRuleCall_5_1_0()); }
	ruleSYMB{ after(grammarAccess.getExprSimpleAccess().getSymSYMBParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__LexAssignment_5_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprSimpleAccess().getLexLExprParserRuleCall_5_2_0()); }
	ruleLExpr{ after(grammarAccess.getExprSimpleAccess().getLexLExprParserRuleCall_5_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LExpr__EAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLExprAccess().getEExprParserRuleCall_1_0()); }
	ruleExpr{ after(grammarAccess.getLExprAccess().getEExprParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Exo1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAndAccess().getExo1ExprOrParserRuleCall_0_0()); }
	ruleExprOr{ after(grammarAccess.getExprAndAccess().getExo1ExprOrParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Exo2Assignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAndAccess().getExo2ExprOrParserRuleCall_1_3_0()); }
	ruleExprOr{ after(grammarAccess.getExprAndAccess().getExo2ExprOrParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Exn1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprOrAccess().getExn1ExprNotParserRuleCall_0_0()); }
	ruleExprNot{ after(grammarAccess.getExprOrAccess().getExn1ExprNotParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Exn2Assignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprOrAccess().getExn2ExprNotParserRuleCall_1_3_0()); }
	ruleExprNot{ after(grammarAccess.getExprOrAccess().getExn2ExprNotParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprNot__ExQ1Assignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprNotAccess().getExQ1ExprEqParserRuleCall_0_2_0()); }
	ruleExprEq{ after(grammarAccess.getExprNotAccess().getExQ1ExprEqParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprNot__ExQ2Assignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprNotAccess().getExQ2ExprEqParserRuleCall_1_0()); }
	ruleExprEq{ after(grammarAccess.getExprNotAccess().getExQ2ExprEqParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__ExS1Assignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprEqAccess().getExS1ExprSimpleParserRuleCall_0_1_0()); }
	ruleExprSimple{ after(grammarAccess.getExprEqAccess().getExS1ExprSimpleParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__ExS2Assignment_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprEqAccess().getExS2ExprSimpleParserRuleCall_0_3_0()); }
	ruleExprSimple{ after(grammarAccess.getExprEqAccess().getExS2ExprSimpleParserRuleCall_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__ExAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprEqAccess().getExExprParserRuleCall_1_1_0()); }
	ruleExpr{ after(grammarAccess.getExprEqAccess().getExExprParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VAR__BvAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVARAccess().getBvBASEVARTerminalRuleCall_0_0()); }
	RULE_BASEVAR{ after(grammarAccess.getVARAccess().getBvBASEVARTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VAR__CfAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVARAccess().getCfCONFTerminalRuleCall_1_0()); }
	RULE_CONF{ after(grammarAccess.getVARAccess().getCfCONFTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SYMB__BsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSYMBAccess().getBsBASESYMBTerminalRuleCall_0_0()); }
	RULE_BASESYMB{ after(grammarAccess.getSYMBAccess().getBsBASESYMBTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SYMB__CfAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSYMBAccess().getCfCONFTerminalRuleCall_1_0()); }
	RULE_CONF{ after(grammarAccess.getSYMBAccess().getCfCONFTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_BASEVAR : 'A'..'Z' ('0'..'9'|'a'..'z'|'A'..'Z')*;

RULE_BASESYMB : 'a'..'z' ('0'..'9'|'a'..'z'|'A'..'Z')*;

RULE_CONF : (('-'|'+'|'.'|'/'|'_'|'&'|'->') ('0'..'9'|'a'..'z'|'A'..'Z')+)* ('?'|'!')?;

RULE_SP : ' ';

RULE_CR : '\n';

RULE_TAB : '\t';

RULE_LF : '\r';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


